#include "FS.h"
#include "SD.h"
#include "SPI.h"
#include <WiFi.h>
#include "time.h"
#include <Ticker.h>
#include <Adafruit_NeoPixel.h>
#include <HTTPClient.h> 
#include <ArduinoJson.h>

#define LED_PIN 16
#define STRIP_PIN 17
#define NUMPIXELS 8

/* gloable variable */
Adafruit_NeoPixel pixels(NUMPIXELS, LED_PIN, NEO_GRB + NEO_KHZ800);

const char *ssid = "1234567";
const char *password = "xd123456";

const char* ntpServer = "cn.ntp.org.cn";
const long  gmtOffset_sec = 4*3600; //不知道为何是4*60*60
const int   daylightOffset_sec = 4*3600;//不知道为何是4*60*60

char data1[70000];

char *imageName0 = "/image0.bin";
char *imageName1 = "/image1.bin";
char *imageName2 = "/image2.bin";
char *imageName3 = "/image3.bin";
char *imageName4 = "/image4.bin";
char *imageName5 = "/image5.bin";
char *imageName6 = "/image6.bin";
char *imageName7 = "/image7.bin";
char *imageName8 = "/image8.bin";
char *imageName9 = "/image9.bin";

char *imageHalf0 = "/half0_0.bin";
char *imageHalf1 = "/half0_1.bin";
char *imageHalf2 = "/half0_2.bin";
char *imageHalf3 = "/half0_3.bin";
char *imageHalf4 = "/half0_4.bin";
char *imageHalf5 = "/half0_5.bin";
char *imageHalf6 = "/half0_6.bin";
char *imageHalf7 = "/half0_7.bin";
char *imageHalf8 = "/half0_8.bin";
char *imageHalf9 = "/half0_9.bin";

//unsigned int adcRead = 0;
int Mode = 1; // 显示模式

HTTPClient http;  //http 服务

#define WHITE            0xFFFF
#define BLACK            0x0000   
#define BLUE             0x001F  
#define BRED             0XF81F
#define GRED             0XFFE0
#define GBLUE            0X07FF
#define RED              0xF800

#define USE_HORIZONTAL 0  //

#if USE_HORIZONTAL==0||USE_HORIZONTAL==1
#define LCD_W 135
#define LCD_H 240

#else
#define LCD_W 240
#define LCD_H 135
#endif

#define LCD_SCLK_Clr() digitalWrite(12, LOW)//SCL=SCLK
#define LCD_SCLK_Set() digitalWrite(12, HIGH)

#define LCD_MOSI_Clr() digitalWrite(14, LOW)//SDA=MOSI
#define LCD_MOSI_Set() digitalWrite(14, HIGH)

#define LCD_RES_Clr()  digitalWrite(26, LOW)//RES/RST
#define LCD_RES_Set()  digitalWrite(26, HIGH)

#define LCD_DC_Clr()   digitalWrite(27, LOW)//DC
#define LCD_DC_Set()   digitalWrite(27, HIGH)
          
#define LCD_CS_Clr()   digitalWrite(25, LOW)//CS1
#define LCD_CS_Set()   digitalWrite(25, HIGH)

#define LCD_CS2_Clr()   digitalWrite(33, LOW)//CS2
#define LCD_CS2_Set()   digitalWrite(33, HIGH)

#define LCD_CS3_Clr()   digitalWrite(32, LOW)//CS3
#define LCD_CS3_Set()   digitalWrite(32, HIGH)

#define LCD_CS4_Clr()   digitalWrite(15, LOW)//CS4
#define LCD_CS4_Set()   digitalWrite(15, HIGH)

#define LCD_CS5_Clr()   digitalWrite(22, LOW)//CS5
#define LCD_CS5_Set()   digitalWrite(22, HIGH)

#define LCD_CS6_Clr()   digitalWrite(21, LOW)//CS6
#define LCD_CS6_Set()   digitalWrite(21, HIGH)

#define LCD_BLK_Clr()  digitalWrite(13, LOW)//BLK
#define LCD_BLK_Set()  digitalWrite(13, HIGH)

#define ADC_PORT 36

// 全局变量，用于片选
//uint8_t ChipSelect = 0;

void LCD_GPIO_Init()
{
  pinMode(12, OUTPUT); 
  pinMode(14, OUTPUT); 
  pinMode(27, OUTPUT); 
  pinMode(26, OUTPUT); 
  pinMode(25, OUTPUT); 
  pinMode(33, OUTPUT); 
  pinMode(32, OUTPUT);
  pinMode(15, OUTPUT);
  pinMode(22, OUTPUT);
  pinMode(21, OUTPUT);
//  pinMode(13, OUTPUT);
  digitalWrite(12, HIGH);
  digitalWrite(14, HIGH);
  digitalWrite(27, HIGH);
  digitalWrite(26, HIGH);
  digitalWrite(25, HIGH);
  digitalWrite(33, HIGH);
  digitalWrite(32, HIGH);
  digitalWrite(15, HIGH);
  digitalWrite(22, HIGH);
  digitalWrite(21, HIGH);
 // digitalWrite(13, HIGH);
}



void LCD_Writ_Bus(uint8_t dat, uint8_t ChipSelect) 
{  
  uint8_t i;
  //if( ChipSelect == 1 ) LCD_CS_Clr();
  //else if( ChipSelect == 2 )  LCD_CS2_Clr();
  switch( ChipSelect ){
    case 1:   LCD_CS_Clr();break;
    case 2:   LCD_CS2_Clr();break;
    case 3:   LCD_CS3_Clr();break;
    case 4:   LCD_CS4_Clr();break;
    case 5:   LCD_CS5_Clr();break;
    case 6:   LCD_CS6_Clr();break;
    default: break;
  }
  
  for(i=0;i<8;i++)
  {       
    LCD_SCLK_Clr();
    if(dat&0x80)
    {
       LCD_MOSI_Set();
    }
    else
    {
       LCD_MOSI_Clr();
    }
    LCD_SCLK_Set();
    dat<<=1;
  } 

  //if( ChipSelect == 1 ) LCD_CS_Set();
  //else if( ChipSelect == 2 )  LCD_CS2_Set();
  switch( ChipSelect ){
    case 1:   LCD_CS_Set();break;
    case 2:   LCD_CS2_Set();break;
    case 3:   LCD_CS3_Set();break;
    case 4:   LCD_CS4_Set();break;
    case 5:   LCD_CS5_Set();break;
    case 6:   LCD_CS6_Set();break;
    default: break;
  }
}

void LCD_WR_DATA8(uint8_t dat, uint8_t ChipSelect)
{
  LCD_Writ_Bus(dat, ChipSelect);
}

void LCD_WR_DATA(uint16_t dat, uint8_t ChipSelect)
{
  LCD_Writ_Bus(dat>>8, ChipSelect);
  LCD_Writ_Bus(dat, ChipSelect);
}

void LCD_WR_REG(uint8_t dat, uint8_t ChipSelect)
{
  LCD_DC_Clr();//Ð´ÃüÁî
  LCD_Writ_Bus(dat, ChipSelect);
  LCD_DC_Set();//Ð´Êý¾Ý
}

void LCD_Address_Set(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2, uint8_t ChipSelect)
{
  if(USE_HORIZONTAL==0)
  {
    LCD_WR_REG(0x2a, ChipSelect);//ÁÐµØÖ·ÉèÖÃ
    LCD_WR_DATA(x1+52, ChipSelect);
    LCD_WR_DATA(x2+52, ChipSelect);
    LCD_WR_REG(0x2b, ChipSelect);//ÐÐµØÖ·ÉèÖÃ
    LCD_WR_DATA(y1+40, ChipSelect);
    LCD_WR_DATA(y2+40, ChipSelect);
    LCD_WR_REG(0x2c, ChipSelect);//´¢´æÆ÷Ð´
  }
  else if(USE_HORIZONTAL==1)
  {
    LCD_WR_REG(0x2a, ChipSelect);//ÁÐµØÖ·ÉèÖÃ
    LCD_WR_DATA(x1+53, ChipSelect);
    LCD_WR_DATA(x2+53, ChipSelect);
    LCD_WR_REG(0x2b, ChipSelect);//ÐÐµØÖ·ÉèÖÃ
    LCD_WR_DATA(y1+40, ChipSelect);
    LCD_WR_DATA(y2+40, ChipSelect);
    LCD_WR_REG(0x2c, ChipSelect);//´¢´æÆ÷Ð´
  }
  else if(USE_HORIZONTAL==2)
  {
    LCD_WR_REG(0x2a, ChipSelect);//ÁÐµØÖ·ÉèÖÃ
    LCD_WR_DATA(x1+40, ChipSelect);
    LCD_WR_DATA(x2+40, ChipSelect);
    LCD_WR_REG(0x2b, ChipSelect);//ÐÐµØÖ·ÉèÖÃ
    LCD_WR_DATA(y1+53, ChipSelect);
    LCD_WR_DATA(y2+53, ChipSelect);
    LCD_WR_REG(0x2c, ChipSelect);//´¢´æÆ÷Ð´
  }
  else
  {
    LCD_WR_REG(0x2a, ChipSelect);//ÁÐµØÖ·ÉèÖÃ
    LCD_WR_DATA(x1+40, ChipSelect);
    LCD_WR_DATA(x2+40, ChipSelect);
    LCD_WR_REG(0x2b, ChipSelect);//ÐÐµØÖ·ÉèÖÃ
    LCD_WR_DATA(y1+52, ChipSelect);
    LCD_WR_DATA(y2+52, ChipSelect);
    LCD_WR_REG(0x2c, ChipSelect);//´¢´æÆ÷Ð´
  }
}

void LCD_Init(uint8_t ChipSelect)
{
 // LCD_GPIO_Init();//GPIO initialize

  if( ChipSelect == 1 ) LCD_RES_Clr();//Reset
  delay(500);

  if( ChipSelect == 1 ) LCD_RES_Set();
  delay(100);

  //LCD_BLK_Set();//´ò¿ª±³¹â
  //delay(100);
  
  LCD_WR_REG(0x11, ChipSelect); 
  delay(120); 
  LCD_WR_REG(0x36, ChipSelect); 
  if(USE_HORIZONTAL==0)LCD_WR_DATA8(0x00, ChipSelect);
  else if(USE_HORIZONTAL==1)LCD_WR_DATA8(0xC0, ChipSelect);
  else if(USE_HORIZONTAL==2)LCD_WR_DATA8(0x70, ChipSelect);
  else LCD_WR_DATA8(0xA0, ChipSelect);

  LCD_WR_REG(0x3A, ChipSelect);
  LCD_WR_DATA8(0x05, ChipSelect);

  LCD_WR_REG(0xB2, ChipSelect);
  LCD_WR_DATA8(0x0C, ChipSelect);
  LCD_WR_DATA8(0x0C, ChipSelect);
  LCD_WR_DATA8(0x00, ChipSelect);
  LCD_WR_DATA8(0x33, ChipSelect);
  LCD_WR_DATA8(0x33, ChipSelect); 

  LCD_WR_REG(0xB7, ChipSelect); 
  LCD_WR_DATA8(0x35, ChipSelect);  

  LCD_WR_REG(0xBB, ChipSelect);
  LCD_WR_DATA8(0x19, ChipSelect);

  LCD_WR_REG(0xC0, ChipSelect);
  LCD_WR_DATA8(0x2C, ChipSelect);

  LCD_WR_REG(0xC2, ChipSelect);
  LCD_WR_DATA8(0x01, ChipSelect);

  LCD_WR_REG(0xC3, ChipSelect);
  LCD_WR_DATA8(0x12, ChipSelect);   

  LCD_WR_REG(0xC4, ChipSelect);
  LCD_WR_DATA8(0x20, ChipSelect);  

  LCD_WR_REG(0xC6, ChipSelect); 
  LCD_WR_DATA8(0x0F, ChipSelect);    

  LCD_WR_REG(0xD0, ChipSelect); 
  LCD_WR_DATA8(0xA4, ChipSelect);
  LCD_WR_DATA8(0xA1, ChipSelect);

  LCD_WR_REG(0xE0, ChipSelect);
  LCD_WR_DATA8(0xD0, ChipSelect);
  LCD_WR_DATA8(0x04, ChipSelect);
  LCD_WR_DATA8(0x0D, ChipSelect);
  LCD_WR_DATA8(0x11, ChipSelect);
  LCD_WR_DATA8(0x13, ChipSelect);
  LCD_WR_DATA8(0x2B, ChipSelect);
  LCD_WR_DATA8(0x3F, ChipSelect);
  LCD_WR_DATA8(0x54, ChipSelect);
  LCD_WR_DATA8(0x4C, ChipSelect);
  LCD_WR_DATA8(0x18, ChipSelect);
  LCD_WR_DATA8(0x0D, ChipSelect);
  LCD_WR_DATA8(0x0B, ChipSelect);
  LCD_WR_DATA8(0x1F, ChipSelect);
  LCD_WR_DATA8(0x23, ChipSelect);

  LCD_WR_REG(0xE1, ChipSelect);
  LCD_WR_DATA8(0xD0, ChipSelect);
  LCD_WR_DATA8(0x04, ChipSelect);
  LCD_WR_DATA8(0x0C, ChipSelect);
  LCD_WR_DATA8(0x11, ChipSelect);
  LCD_WR_DATA8(0x13, ChipSelect);
  LCD_WR_DATA8(0x2C, ChipSelect);
  LCD_WR_DATA8(0x3F, ChipSelect);
  LCD_WR_DATA8(0x44, ChipSelect);
  LCD_WR_DATA8(0x51, ChipSelect);
  LCD_WR_DATA8(0x2F, ChipSelect);
  LCD_WR_DATA8(0x1F, ChipSelect);
  LCD_WR_DATA8(0x1F, ChipSelect);
  LCD_WR_DATA8(0x20, ChipSelect);
  LCD_WR_DATA8(0x23, ChipSelect);

  LCD_WR_REG(0x21, ChipSelect); 

  LCD_WR_REG(0x29, ChipSelect); 
}

void LCD_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color, uint8_t ChipSelect)
{          
  uint16_t i,j; 
  LCD_Address_Set(xsta,ysta,xend-1,yend-1, ChipSelect);//ÉèÖÃÏÔÊ¾·¶Î§
  for(i=ysta;i<yend;i++)
  {                               
    for(j=xsta;j<xend;j++)
    {
      LCD_WR_DATA(color, ChipSelect);
    }
  }                   
}

void LCD_DrawPoint(uint16_t x,uint16_t y,uint16_t color, uint8_t ChipSelect)
{
  LCD_Address_Set(x,y,x,y, ChipSelect);//ÉèÖÃ¹â±êÎ»ÖÃ 
  LCD_WR_DATA(color, ChipSelect);
} 

void LCD_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color, uint8_t ChipSelect)
{
  uint16_t t; 
  int xerr=0,yerr=0,delta_x,delta_y,distance;
  int incx,incy,uRow,uCol;
  delta_x=x2-x1; //¼ÆËã×ø±êÔöÁ¿ 
  delta_y=y2-y1;
  uRow=x1;//»­ÏßÆðµã×ø±ê
  uCol=y1;
  if(delta_x>0)incx=1; //ÉèÖÃµ¥²½·½Ïò 
  else if (delta_x==0)incx=0;//´¹Ö±Ïß 
  else {incx=-1;delta_x=-delta_x;}
  if(delta_y>0)incy=1;
  else if (delta_y==0)incy=0;//Ë®Æ½Ïß 
  else {incy=-1;delta_y=-delta_y;}
  if(delta_x>delta_y)distance=delta_x; //Ñ¡È¡»ù±¾ÔöÁ¿×ø±êÖá 
  else distance=delta_y;
  for(t=0;t<distance+1;t++)
  {
    LCD_DrawPoint(uRow,uCol,color, ChipSelect);//»­µã
    xerr+=delta_x;
    yerr+=delta_y;
    if(xerr>distance)
    {
      xerr-=distance;
      uRow+=incx;
    }
    if(yerr>distance)
    {
      yerr-=distance;
      uCol+=incy;
    }
  }
}

void LCD_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[], uint8_t ChipSelect)
{
  uint16_t i,j;
  uint32_t k=0;
  LCD_Address_Set(x,y,x+length-1,y+width-1, ChipSelect);
  for(i=0;i<length;i++)
  {
    for(j=0;j<width;j++)
    {
      LCD_WR_DATA8(pic[k*2], ChipSelect);
      LCD_WR_DATA8(pic[k*2+1], ChipSelect);
      k++;
    }
  }     
}

void writeImage( fs::FS &fs, const uint8_t *buff, int fileLength )
{
  Serial.println("Writing the image to the sd card ...........");
  File file = fs.open( "/image1.bin", FILE_WRITE );
  if( !file ){
    Serial.println( "Failed to open file for writing ..." );
    return;  
  }
  size_t length = file.write( buff, fileLength );
  Serial.printf( "write bytes: %d\n", length );

  file.close();  
}

void readFile( fs::FS &fs, const char * path, char *readBuff )
{
 // Serial.println( "Reading the image from the SD card ............" );
  File file = fs.open( path );
  if(!file){
    Serial.println("Failed to open file for reading");
    return;
  }
 // Serial.println( "Open the image file successfully .... " );
  size_t fileSize = file.size();
 // Serial.printf( "The size of the Image file: %d \n", fileSize );

  size_t readLength = file.readBytes( readBuff, fileSize );
 // Serial.printf( "Read bytes from the file is: %d \n", readLength );

  file.close();
}

// ASCII 码
const unsigned char ascii_1608[][16]={
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*" ",0*/
{0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00,0x18,0x18,0x00,0x00},/*"!",1*/
{0x00,0x48,0x6C,0x24,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*""",2*/
{0x00,0x00,0x00,0x24,0x24,0x24,0x7F,0x12,0x12,0x12,0x7F,0x12,0x12,0x12,0x00,0x00},/*"#",3*/
{0x00,0x00,0x08,0x1C,0x2A,0x2A,0x0A,0x0C,0x18,0x28,0x28,0x2A,0x2A,0x1C,0x08,0x08},/*"$",4*/
{0x00,0x00,0x00,0x22,0x25,0x15,0x15,0x15,0x2A,0x58,0x54,0x54,0x54,0x22,0x00,0x00},/*"%",5*/
{0x00,0x00,0x00,0x0C,0x12,0x12,0x12,0x0A,0x76,0x25,0x29,0x11,0x91,0x6E,0x00,0x00},/*"&",6*/
{0x00,0x06,0x06,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"'",7*/
{0x00,0x40,0x20,0x10,0x10,0x08,0x08,0x08,0x08,0x08,0x08,0x10,0x10,0x20,0x40,0x00},/*"(",8*/
{0x00,0x02,0x04,0x08,0x08,0x10,0x10,0x10,0x10,0x10,0x10,0x08,0x08,0x04,0x02,0x00},/*")",9*/
{0x00,0x00,0x00,0x00,0x08,0x08,0x6B,0x1C,0x1C,0x6B,0x08,0x08,0x00,0x00,0x00,0x00},/*"*",10*/
{0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x7F,0x08,0x08,0x08,0x08,0x00,0x00,0x00},/*"+",11*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x06,0x04,0x03},/*",",12*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"-",13*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x06,0x00,0x00},/*".",14*/
{0x00,0x00,0x80,0x40,0x40,0x20,0x20,0x10,0x10,0x08,0x08,0x04,0x04,0x02,0x02,0x00},/*"/",15*/
{0x00,0x00,0x00,0x18,0x24,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x24,0x18,0x00,0x00},/*"0",16*/
{0x00,0x00,0x00,0x08,0x0E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00},/*"1",17*/
{0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x20,0x20,0x10,0x08,0x04,0x42,0x7E,0x00,0x00},/*"2",18*/
{0x00,0x00,0x00,0x3C,0x42,0x42,0x20,0x18,0x20,0x40,0x40,0x42,0x22,0x1C,0x00,0x00},/*"3",19*/
{0x00,0x00,0x00,0x20,0x30,0x28,0x24,0x24,0x22,0x22,0x7E,0x20,0x20,0x78,0x00,0x00},/*"4",20*/
{0x00,0x00,0x00,0x7E,0x02,0x02,0x02,0x1A,0x26,0x40,0x40,0x42,0x22,0x1C,0x00,0x00},/*"5",21*/
{0x00,0x00,0x00,0x38,0x24,0x02,0x02,0x1A,0x26,0x42,0x42,0x42,0x24,0x18,0x00,0x00},/*"6",22*/
{0x00,0x00,0x00,0x7E,0x22,0x22,0x10,0x10,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00},/*"7",23*/
{0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x24,0x18,0x24,0x42,0x42,0x42,0x3C,0x00,0x00},/*"8",24*/
{0x00,0x00,0x00,0x18,0x24,0x42,0x42,0x42,0x64,0x58,0x40,0x40,0x24,0x1C,0x00,0x00},/*"9",25*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00},/*":",26*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x04},/*";",27*/
{0x00,0x00,0x00,0x40,0x20,0x10,0x08,0x04,0x02,0x04,0x08,0x10,0x20,0x40,0x00,0x00},/*"<",28*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x00,0x00},/*"=",29*/
{0x00,0x00,0x00,0x02,0x04,0x08,0x10,0x20,0x40,0x20,0x10,0x08,0x04,0x02,0x00,0x00},/*">",30*/
{0x00,0x00,0x00,0x3C,0x42,0x42,0x46,0x40,0x20,0x10,0x10,0x00,0x18,0x18,0x00,0x00},/*"?",31*/
{0x00,0x00,0x00,0x1C,0x22,0x5A,0x55,0x55,0x55,0x55,0x2D,0x42,0x22,0x1C,0x00,0x00},/*"@",32*/
{0x00,0x00,0x00,0x08,0x08,0x18,0x14,0x14,0x24,0x3C,0x22,0x42,0x42,0xE7,0x00,0x00},/*"A",33*/
{0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x1E,0x22,0x42,0x42,0x42,0x22,0x1F,0x00,0x00},/*"B",34*/
{0x00,0x00,0x00,0x7C,0x42,0x42,0x01,0x01,0x01,0x01,0x01,0x42,0x22,0x1C,0x00,0x00},/*"C",35*/
{0x00,0x00,0x00,0x1F,0x22,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x22,0x1F,0x00,0x00},/*"D",36*/
{0x00,0x00,0x00,0x3F,0x42,0x12,0x12,0x1E,0x12,0x12,0x02,0x42,0x42,0x3F,0x00,0x00},/*"E",37*/
{0x00,0x00,0x00,0x3F,0x42,0x12,0x12,0x1E,0x12,0x12,0x02,0x02,0x02,0x07,0x00,0x00},/*"F",38*/
{0x00,0x00,0x00,0x3C,0x22,0x22,0x01,0x01,0x01,0x71,0x21,0x22,0x22,0x1C,0x00,0x00},/*"G",39*/
{0x00,0x00,0x00,0xE7,0x42,0x42,0x42,0x42,0x7E,0x42,0x42,0x42,0x42,0xE7,0x00,0x00},/*"H",40*/
{0x00,0x00,0x00,0x3E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00},/*"I",41*/
{0x00,0x00,0x00,0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x11,0x0F},/*"J",42*/
{0x00,0x00,0x00,0x77,0x22,0x12,0x0A,0x0E,0x0A,0x12,0x12,0x22,0x22,0x77,0x00,0x00},/*"K",43*/
{0x00,0x00,0x00,0x07,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x42,0x7F,0x00,0x00},/*"L",44*/
{0x00,0x00,0x00,0x77,0x36,0x36,0x36,0x36,0x2A,0x2A,0x2A,0x2A,0x2A,0x6B,0x00,0x00},/*"M",45*/
{0x00,0x00,0x00,0xE3,0x46,0x46,0x4A,0x4A,0x52,0x52,0x52,0x62,0x62,0x47,0x00,0x00},/*"N",46*/
{0x00,0x00,0x00,0x1C,0x22,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x22,0x1C,0x00,0x00},/*"O",47*/
{0x00,0x00,0x00,0x3F,0x42,0x42,0x42,0x42,0x3E,0x02,0x02,0x02,0x02,0x07,0x00,0x00},/*"P",48*/
{0x00,0x00,0x00,0x1C,0x22,0x41,0x41,0x41,0x41,0x41,0x4D,0x53,0x32,0x1C,0x60,0x00},/*"Q",49*/
{0x00,0x00,0x00,0x3F,0x42,0x42,0x42,0x3E,0x12,0x12,0x22,0x22,0x42,0xC7,0x00,0x00},/*"R",50*/
{0x00,0x00,0x00,0x7C,0x42,0x42,0x02,0x04,0x18,0x20,0x40,0x42,0x42,0x3E,0x00,0x00},/*"S",51*/
{0x00,0x00,0x00,0x7F,0x49,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x1C,0x00,0x00},/*"T",52*/
{0x00,0x00,0x00,0xE7,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00},/*"U",53*/
{0x00,0x00,0x00,0xE7,0x42,0x42,0x22,0x24,0x24,0x14,0x14,0x18,0x08,0x08,0x00,0x00},/*"V",54*/
{0x00,0x00,0x00,0x6B,0x49,0x49,0x49,0x49,0x55,0x55,0x36,0x22,0x22,0x22,0x00,0x00},/*"W",55*/
{0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x18,0x18,0x18,0x24,0x24,0x42,0xE7,0x00,0x00},/*"X",56*/
{0x00,0x00,0x00,0x77,0x22,0x22,0x14,0x14,0x08,0x08,0x08,0x08,0x08,0x1C,0x00,0x00},/*"Y",57*/
{0x00,0x00,0x00,0x7E,0x21,0x20,0x10,0x10,0x08,0x04,0x04,0x42,0x42,0x3F,0x00,0x00},/*"Z",58*/
{0x00,0x78,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x78,0x00},/*"[",59*/
{0x00,0x00,0x02,0x02,0x04,0x04,0x08,0x08,0x08,0x10,0x10,0x20,0x20,0x20,0x40,0x40},/*"\",60*/
{0x00,0x1E,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1E,0x00},/*"]",61*/
{0x00,0x38,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"^",62*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF},/*"_",63*/
{0x00,0x06,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"`",64*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x78,0x44,0x42,0x42,0xFC,0x00,0x00},/*"a",65*/
{0x00,0x00,0x00,0x03,0x02,0x02,0x02,0x1A,0x26,0x42,0x42,0x42,0x26,0x1A,0x00,0x00},/*"b",66*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x44,0x02,0x02,0x02,0x44,0x38,0x00,0x00},/*"c",67*/
{0x00,0x00,0x00,0x60,0x40,0x40,0x40,0x78,0x44,0x42,0x42,0x42,0x64,0xD8,0x00,0x00},/*"d",68*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x7E,0x02,0x02,0x42,0x3C,0x00,0x00},/*"e",69*/
{0x00,0x00,0x00,0xF0,0x88,0x08,0x08,0x7E,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00},/*"f",70*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x22,0x22,0x1C,0x02,0x3C,0x42,0x42,0x3C},/*"g",71*/
{0x00,0x00,0x00,0x03,0x02,0x02,0x02,0x3A,0x46,0x42,0x42,0x42,0x42,0xE7,0x00,0x00},/*"h",72*/
{0x00,0x00,0x00,0x0C,0x0C,0x00,0x00,0x0E,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00},/*"i",73*/
{0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x38,0x20,0x20,0x20,0x20,0x20,0x20,0x22,0x1E},/*"j",74*/
{0x00,0x00,0x00,0x03,0x02,0x02,0x02,0x72,0x12,0x0A,0x16,0x12,0x22,0x77,0x00,0x00},/*"k",75*/
{0x00,0x00,0x00,0x0E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00},/*"l",76*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x92,0x92,0x92,0x92,0x92,0xB7,0x00,0x00},/*"m",77*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3B,0x46,0x42,0x42,0x42,0x42,0xE7,0x00,0x00},/*"n",78*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00},/*"o",79*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1B,0x26,0x42,0x42,0x42,0x22,0x1E,0x02,0x07},/*"p",80*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x44,0x42,0x42,0x42,0x44,0x78,0x40,0xE0},/*"q",81*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x77,0x4C,0x04,0x04,0x04,0x04,0x1F,0x00,0x00},/*"r",82*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x42,0x02,0x3C,0x40,0x42,0x3E,0x00,0x00},/*"s",83*/
{0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x3E,0x08,0x08,0x08,0x08,0x08,0x30,0x00,0x00},/*"t",84*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0x42,0x42,0x42,0x42,0x62,0xDC,0x00,0x00},/*"u",85*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x14,0x08,0x08,0x00,0x00},/*"v",86*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEB,0x49,0x49,0x55,0x55,0x22,0x22,0x00,0x00},/*"w",87*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x76,0x24,0x18,0x18,0x18,0x24,0x6E,0x00,0x00},/*"x",88*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x14,0x18,0x08,0x08,0x07},/*"y",89*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x22,0x10,0x08,0x08,0x44,0x7E,0x00,0x00},/*"z",90*/
{0x00,0xC0,0x20,0x20,0x20,0x20,0x20,0x10,0x20,0x20,0x20,0x20,0x20,0x20,0xC0,0x00},/*"{",91*/
{0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10},/*"|",92*/
{0x00,0x06,0x08,0x08,0x08,0x08,0x08,0x10,0x08,0x08,0x08,0x08,0x08,0x08,0x06,0x00},/*"}",93*/
{0x0C,0x32,0xC2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"~",94*/
}; 
const unsigned char ascii_2412[][48]={

{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*" ",0*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x40,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"!",1*/
{0x00,0x00,0x00,0x00,0x60,0x06,0x60,0x06,0x30,0x03,0x98,0x01,0x88,0x00,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*""",2*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x02,0x10,0x02,0x10,0x02,0x10,0x02,0xFE,0x07,0xFE,0x07,0x08,0x02,0x08,0x01,0x08,0x01,0x08,0x01,0x08,0x01,0xFE,0x07,0xFE,0x07,0x04,0x01,0x04,0x01,0x04,0x01,0x04,0x01,0x00,0x00,0x00,0x00,0x00,0x00},/*"#",3*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x40,0x00,0xF0,0x01,0x58,0x03,0x4C,0x03,0xCC,0x03,0x4C,0x00,0x58,0x00,0x70,0x00,0xE0,0x00,0xC0,0x01,0xC0,0x01,0x40,0x03,0x4C,0x03,0x5C,0x03,0x4C,0x03,0x48,0x01,0xF0,0x00,0x40,0x00,0x40,0x00,0x00,0x00},/*"$",4*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x01,0x0A,0x01,0x91,0x00,0x91,0x00,0x91,0x00,0x51,0x00,0x51,0x00,0x3A,0x00,0xAE,0x03,0xA0,0x02,0x50,0x04,0x50,0x04,0x48,0x04,0x48,0x04,0x48,0x04,0x84,0x02,0x84,0x03,0x00,0x00,0x00,0x00,0x00,0x00},/*"%",5*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x6C,0x00,0x6C,0x00,0x6C,0x00,0x6C,0x00,0x6C,0x00,0x2C,0x00,0x98,0x07,0x1C,0x01,0x1A,0x01,0x33,0x01,0x33,0x01,0x63,0x01,0xE3,0x00,0xC3,0x08,0xC6,0x09,0x3C,0x07,0x00,0x00,0x00,0x00,0x00,0x00},/*"&",6*/
{0x00,0x00,0x00,0x00,0x0C,0x00,0x1C,0x00,0x10,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"'",7*/
{0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x02,0x00,0x01,0x80,0x00,0x80,0x00,0x40,0x00,0x40,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x40,0x00,0x40,0x00,0x80,0x00,0x80,0x00,0x00,0x01,0x00,0x02,0x00,0x04,0x00,0x00},/*"(",8*/
{0x00,0x00,0x00,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x10,0x00,0x20,0x00,0x20,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x20,0x00,0x20,0x00,0x10,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x02,0x00,0x00,0x00},/*")",9*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0xC0,0x00,0x40,0x00,0x46,0x0C,0x4E,0x0F,0xD0,0x01,0xF0,0x01,0x5E,0x0F,0x46,0x0C,0x40,0x00,0x40,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"*",10*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0xFE,0x0F,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"+",11*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x1C,0x00,0x10,0x00,0x10,0x00,0x08,0x00,0x04,0x00},/*",",12*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"-",13*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x1C,0x00,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*".",14*/
{0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x06,0x00,0x02,0x00,0x03,0x00,0x01,0x00,0x01,0x80,0x00,0x80,0x00,0x40,0x00,0x40,0x00,0x60,0x00,0x20,0x00,0x20,0x00,0x10,0x00,0x10,0x00,0x08,0x00,0x08,0x00,0x0C,0x00,0x04,0x00,0x06,0x00,0x02,0x00,0x00,0x00},/*"/",15*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0x98,0x01,0x0C,0x03,0x0C,0x03,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x0C,0x03,0x0C,0x03,0x98,0x01,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"0",16*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x7C,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xFC,0x03,0x00,0x00,0x00,0x00,0x00,0x00},/*"1",17*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00,0x84,0x01,0x02,0x03,0x06,0x03,0x06,0x03,0x00,0x03,0x00,0x01,0x80,0x01,0xC0,0x00,0x60,0x00,0x20,0x00,0x10,0x00,0x08,0x02,0x04,0x02,0x06,0x02,0xFE,0x03,0x00,0x00,0x00,0x00,0x00,0x00},/*"2",18*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0xC6,0x00,0x86,0x01,0x86,0x01,0x80,0x01,0x80,0x01,0xC0,0x00,0x70,0x00,0x80,0x01,0x00,0x01,0x00,0x03,0x00,0x03,0x06,0x03,0x06,0x03,0x86,0x01,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"3",19*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x80,0x01,0xC0,0x01,0xA0,0x01,0xA0,0x01,0x90,0x01,0x88,0x01,0x88,0x01,0x84,0x01,0x82,0x01,0xFE,0x0F,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0xE0,0x07,0x00,0x00,0x00,0x00,0x00,0x00},/*"4",20*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x03,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0xF4,0x00,0x8C,0x01,0x04,0x03,0x00,0x03,0x00,0x03,0x06,0x03,0x06,0x03,0x82,0x01,0x84,0x01,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"5",21*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x01,0x18,0x03,0x0C,0x03,0x0C,0x00,0x04,0x00,0x06,0x00,0xE6,0x01,0x16,0x03,0x0E,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x04,0x06,0x0C,0x02,0x18,0x03,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"6",22*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x07,0x0C,0x06,0x04,0x02,0x04,0x01,0x00,0x01,0x00,0x01,0x80,0x00,0x80,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"7",23*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x01,0x0C,0x03,0x06,0x06,0x06,0x06,0x06,0x06,0x0C,0x02,0x1C,0x03,0xF0,0x00,0xC8,0x01,0x0C,0x03,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x0C,0x03,0xF0,0x01,0x00,0x00,0x00,0x00,0x00,0x00},/*"8",24*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0x0C,0x01,0x0C,0x03,0x06,0x02,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x07,0x8C,0x06,0x78,0x06,0x00,0x06,0x00,0x03,0x00,0x03,0x0C,0x01,0x8C,0x01,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"9",25*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*":",26*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x60,0x00,0x40,0x00,0x20,0x00,0x20,0x00},/*";",27*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x02,0x00,0x01,0x80,0x00,0x40,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x80,0x00,0x00,0x01,0x00,0x02,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00},/*"<",28*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"=",29*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x80,0x00,0x00,0x01,0x00,0x02,0x00,0x04,0x00,0x02,0x00,0x01,0x80,0x00,0x40,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*">",30*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x03,0x18,0x06,0x04,0x0C,0x04,0x0C,0x0C,0x0C,0x0C,0x0C,0x00,0x07,0x80,0x01,0x40,0x00,0x40,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0xE0,0x00,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"?",31*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0x18,0x03,0x0C,0x02,0xCC,0x05,0x64,0x05,0x66,0x05,0xA6,0x05,0xB6,0x04,0xB6,0x04,0xB6,0x04,0xB6,0x04,0xB6,0x02,0xE4,0x01,0x0C,0x04,0x0C,0x02,0x18,0x03,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"@",32*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x60,0x00,0x50,0x00,0xD0,0x00,0x90,0x00,0x90,0x00,0x88,0x00,0x88,0x01,0x08,0x01,0xF8,0x01,0x04,0x03,0x04,0x03,0x04,0x02,0x02,0x02,0x02,0x06,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x00},/*"A",33*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x00,0x8C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x8C,0x01,0xFC,0x00,0x0C,0x03,0x0C,0x02,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x03,0xFE,0x01,0x00,0x00,0x00,0x00,0x00,0x00},/*"B",34*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x03,0x18,0x03,0x0C,0x06,0x0C,0x04,0x04,0x04,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x04,0x0C,0x04,0x0C,0x02,0x18,0x03,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"C",35*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x8C,0x01,0x0C,0x03,0x0C,0x03,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x03,0x0C,0x03,0x8C,0x01,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"D",36*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x03,0x06,0x03,0x06,0x04,0x06,0x04,0x06,0x00,0x86,0x00,0x86,0x00,0xFE,0x00,0x86,0x00,0x86,0x00,0x86,0x00,0x06,0x00,0x06,0x04,0x06,0x04,0x06,0x02,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,0x00},/*"E",37*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x03,0x06,0x03,0x06,0x04,0x06,0x04,0x06,0x00,0x86,0x00,0x86,0x00,0xFE,0x00,0x86,0x00,0x86,0x00,0x86,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"F",38*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0x18,0x01,0x0C,0x02,0x0C,0x02,0x04,0x02,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0xC6,0x0F,0x06,0x03,0x06,0x03,0x0C,0x03,0x0C,0x03,0x18,0x03,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"G",39*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x0F,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0xFE,0x07,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x0F,0x0F,0x00,0x00,0x00,0x00,0x00,0x00},/*"H",40*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x03,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xFC,0x03,0x00,0x00,0x00,0x00,0x00,0x00},/*"I",41*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x07,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC6,0x00,0x66,0x00,0x3C,0x00},/*"J",42*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xCF,0x03,0x86,0x01,0xC6,0x00,0x46,0x00,0x26,0x00,0x16,0x00,0x36,0x00,0x2E,0x00,0x6E,0x00,0x46,0x00,0xC6,0x00,0x86,0x00,0x86,0x01,0x06,0x01,0x06,0x03,0x8F,0x07,0x00,0x00,0x00,0x00,0x00,0x00},/*"K",43*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x04,0x06,0x04,0x06,0x02,0xFF,0x03,0x00,0x00,0x00,0x00,0x00,0x00},/*"L",44*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x07,0x86,0x03,0x86,0x03,0x8E,0x03,0x8E,0x03,0x4E,0x03,0x4E,0x03,0x4A,0x03,0x5A,0x03,0x5A,0x03,0x3A,0x03,0x32,0x03,0x32,0x03,0x32,0x03,0x12,0x03,0x87,0x07,0x00,0x00,0x00,0x00,0x00,0x00},/*"M",45*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8E,0x0F,0x0C,0x02,0x1C,0x02,0x1C,0x02,0x34,0x02,0x34,0x02,0x64,0x02,0x64,0x02,0x44,0x02,0xC4,0x02,0x84,0x02,0x84,0x03,0x84,0x03,0x04,0x03,0x04,0x03,0x1F,0x02,0x00,0x00,0x00,0x00,0x00,0x00},/*"N",46*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0x98,0x01,0x0C,0x03,0x0C,0x02,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x0C,0x02,0x0C,0x03,0x98,0x01,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"O",47*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x06,0x03,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x86,0x03,0xFE,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"P",48*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0x98,0x01,0x0C,0x03,0x0C,0x02,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x76,0x06,0x4C,0x02,0xCC,0x03,0x98,0x01,0xF0,0x00,0x80,0x07,0x00,0x03,0x00,0x00},/*"Q",49*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x01,0x06,0x03,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x03,0xFE,0x00,0x46,0x00,0xC6,0x00,0x86,0x00,0x86,0x01,0x06,0x03,0x06,0x03,0x06,0x06,0x0F,0x0E,0x00,0x00,0x00,0x00,0x00,0x00},/*"R",50*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x02,0x0C,0x03,0x06,0x02,0x06,0x02,0x06,0x00,0x0E,0x00,0x3C,0x00,0xF8,0x00,0xE0,0x03,0x80,0x03,0x00,0x07,0x02,0x06,0x02,0x06,0x06,0x06,0x0C,0x03,0xF0,0x01,0x00,0x00,0x00,0x00,0x00,0x00},/*"S",51*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x07,0x62,0x04,0x61,0x08,0x61,0x08,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xF8,0x01,0x00,0x00,0x00,0x00,0x00,0x00},/*"T",52*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x07,0x0C,0x02,0x0C,0x02,0x0C,0x02,0x0C,0x02,0x0C,0x02,0x0C,0x02,0x0C,0x02,0x0C,0x02,0x0C,0x02,0x0C,0x02,0x0C,0x02,0x0C,0x02,0x0C,0x02,0x18,0x01,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"U",53*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x07,0x06,0x02,0x04,0x01,0x04,0x01,0x0C,0x01,0x0C,0x01,0x88,0x00,0x88,0x00,0x98,0x00,0x98,0x00,0x50,0x00,0x50,0x00,0x70,0x00,0x30,0x00,0x20,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"V",54*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF7,0x0E,0x62,0x04,0x42,0x04,0x46,0x04,0x46,0x04,0x64,0x02,0x64,0x02,0xE4,0x02,0xE4,0x02,0x9C,0x02,0x9C,0x01,0x98,0x01,0x98,0x01,0x88,0x01,0x88,0x00,0x88,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"W",55*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9E,0x07,0x0C,0x01,0x08,0x01,0x18,0x01,0x90,0x00,0xB0,0x00,0x60,0x00,0x20,0x00,0x60,0x00,0x60,0x00,0xD0,0x00,0x90,0x00,0x88,0x01,0x08,0x01,0x04,0x03,0x8E,0x07,0x00,0x00,0x00,0x00,0x00,0x00},/*"X",56*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x0F,0x06,0x04,0x04,0x02,0x0C,0x02,0x08,0x01,0x18,0x01,0xB8,0x00,0xB0,0x00,0x70,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xF8,0x01,0x00,0x00,0x00,0x00,0x00,0x00},/*"Y",57*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x07,0x0C,0x02,0x06,0x03,0x02,0x01,0x80,0x01,0x80,0x00,0x40,0x00,0x40,0x00,0x20,0x00,0x20,0x00,0x10,0x00,0x18,0x00,0x08,0x04,0x0C,0x04,0x04,0x02,0xFE,0x03,0x00,0x00,0x00,0x00,0x00,0x00},/*"Z",58*/
{0x00,0x00,0x00,0x00,0xE0,0x03,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0xE0,0x03,0x00,0x00},/*"[",59*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x04,0x00,0x08,0x00,0x08,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x20,0x00,0x20,0x00,0x40,0x00,0x40,0x00,0xC0,0x00,0x80,0x00,0x80,0x00,0x00,0x01,0x00,0x01,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x04},/*"\",60*/
{0x00,0x00,0x00,0x00,0x7C,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x7C,0x00,0x00,0x00},/*"]",61*/
{0x00,0x00,0x60,0x00,0x90,0x00,0x08,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"^",62*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x0F},/*"_",63*/
{0x00,0x00,0x00,0x00,0x18,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"`",64*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x01,0x0C,0x03,0x0C,0x03,0x00,0x03,0xE0,0x03,0x1C,0x03,0x0E,0x03,0x06,0x03,0x06,0x03,0x8E,0x0B,0x7C,0x0E,0x00,0x00,0x00,0x00,0x00,0x00},/*"a",65*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x0E,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0xCC,0x01,0x3C,0x03,0x1C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x02,0x1C,0x03,0xE4,0x01,0x00,0x00,0x00,0x00,0x00,0x00},/*"b",66*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0x8C,0x01,0x8C,0x01,0x86,0x01,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x02,0x0C,0x02,0x0C,0x01,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"c",67*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xC0,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x78,0x03,0x8C,0x03,0x0C,0x03,0x06,0x03,0x06,0x03,0x06,0x03,0x06,0x03,0x06,0x03,0x04,0x03,0x8C,0x07,0x78,0x01,0x00,0x00,0x00,0x00,0x00,0x00},/*"d",68*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x01,0x18,0x03,0x08,0x02,0x0C,0x06,0x0C,0x06,0xFC,0x07,0x0C,0x00,0x0C,0x00,0x18,0x04,0x18,0x02,0xE0,0x01,0x00,0x00,0x00,0x00,0x00,0x00},/*"e",69*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x03,0x60,0x06,0x30,0x06,0x30,0x00,0x30,0x00,0xFE,0x01,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0xFC,0x01,0x00,0x00,0x00,0x00,0x00,0x00},/*"f",70*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x07,0xD8,0x06,0x8C,0x01,0x8C,0x01,0x8C,0x01,0x98,0x01,0xF8,0x00,0x0C,0x00,0xFC,0x00,0xCC,0x03,0x06,0x03,0x06,0x03,0x8E,0x03,0xF8,0x00},/*"g",71*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x0E,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0xEC,0x01,0x1C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x9E,0x07,0x00,0x00,0x00,0x00,0x00,0x00},/*"h",72*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x7C,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xFC,0x03,0x00,0x00,0x00,0x00,0x00,0x00},/*"i",73*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x01,0xC0,0x01,0x00,0x00,0x00,0x00,0x00,0x01,0xF0,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0xCC,0x00,0x7C,0x00},/*"j",74*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x0E,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x8C,0x03,0x8C,0x00,0x8C,0x00,0x4C,0x00,0x6C,0x00,0x5C,0x00,0x8C,0x00,0x8C,0x01,0x0C,0x01,0x0C,0x03,0x9E,0x07,0x00,0x00,0x00,0x00,0x00,0x00},/*"k",75*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x7C,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xFC,0x03,0x00,0x00,0x00,0x00,0x00,0x00},/*"l",76*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x37,0x07,0xEE,0x06,0x66,0x06,0x66,0x06,0x66,0x06,0x66,0x06,0x66,0x06,0x66,0x06,0x66,0x06,0x66,0x06,0xFF,0x0F,0x00,0x00,0x00,0x00,0x00,0x00},/*"m",77*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEE,0x01,0x1C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x9E,0x07,0x00,0x00,0x00,0x00,0x00,0x00},/*"n",78*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0x98,0x01,0x0C,0x03,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x0C,0x03,0x0C,0x03,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"o",79*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEE,0x01,0x1C,0x03,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x0C,0x03,0x1C,0x03,0xEC,0x01,0x0C,0x00,0x0C,0x00,0x3E,0x00},/*"p",80*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x02,0x8C,0x03,0x0C,0x03,0x06,0x03,0x06,0x03,0x06,0x03,0x06,0x03,0x06,0x03,0x04,0x03,0x8C,0x03,0x78,0x03,0x00,0x03,0x00,0x03,0xC0,0x07},/*"q",81*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9F,0x03,0x58,0x06,0x38,0x06,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"r",82*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x03,0x1C,0x03,0x0C,0x02,0x0C,0x02,0x38,0x00,0xF0,0x00,0xC0,0x03,0x04,0x03,0x04,0x03,0x8C,0x03,0xFC,0x01,0x00,0x00,0x00,0x00,0x00,0x00},/*"s",83*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x20,0x00,0x30,0x00,0x30,0x00,0xFE,0x01,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x02,0x30,0x02,0xE0,0x01,0x00,0x00,0x00,0x00,0x00,0x00},/*"t",84*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x02,0x8E,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x0C,0x03,0x9C,0x07,0x78,0x01,0x00,0x00,0x00,0x00,0x00,0x00},/*"u",85*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x07,0x0C,0x02,0x08,0x01,0x08,0x01,0x18,0x01,0x90,0x00,0xB0,0x00,0xB0,0x00,0x60,0x00,0x60,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"v",86*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF7,0x0E,0x62,0x04,0x46,0x04,0x64,0x02,0x64,0x02,0xEC,0x02,0x9C,0x01,0x98,0x01,0x98,0x01,0x98,0x01,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"w",87*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xBC,0x07,0x18,0x01,0x10,0x01,0xB0,0x00,0x60,0x00,0x60,0x00,0xE0,0x00,0x90,0x00,0x08,0x01,0x08,0x03,0x9E,0x07,0x00,0x00,0x00,0x00,0x00,0x00},/*"x",88*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9E,0x07,0x08,0x01,0x08,0x01,0x08,0x01,0x90,0x00,0x90,0x00,0xB0,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x20,0x00,0x20,0x00,0x24,0x00,0x1C,0x00},/*"y",89*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x01,0x84,0x01,0xC4,0x00,0x44,0x00,0x60,0x00,0x20,0x00,0x30,0x00,0x18,0x02,0x08,0x02,0x0C,0x03,0xFC,0x01,0x00,0x00,0x00,0x00,0x00,0x00},/*"z",90*/
{0x00,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x40,0x00,0x20,0x00,0x40,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x00,0x03,0x00,0x00},/*"{",91*/
{0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00},/*"|",92*/
{0x00,0x00,0x00,0x00,0x0C,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x20,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x10,0x00,0x0C,0x00,0x00,0x00},/*"}",93*/
{0x00,0x00,0x1C,0x00,0x22,0x04,0xC2,0x04,0x80,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"~",94*/

};

const unsigned char ascii_3216[][64]={
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*" ",0*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x01,0xC0,0x01,0xC0,0x01,0xC0,0x01,0xC0,0x01,0xC0,0x01,0xC0,0x01,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0xC0,0x03,0xC0,0x03,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"!",1*/
{0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x1C,0xE0,0x1C,0xF0,0x1E,0x70,0x0E,0x38,0x07,0x18,0x03,0x08,0x01,0x84,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*""",2*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0x20,0x10,0xFE,0x7F,0xFE,0x7F,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0x10,0x08,0xFE,0x7F,0xFE,0x7F,0x08,0x04,0x08,0x04,0x08,0x04,0x08,0x04,0x08,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"#",3*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0xC0,0x07,0x60,0x19,0x10,0x31,0x18,0x31,0x18,0x39,0x18,0x39,0x38,0x01,0x70,0x01,0xE0,0x01,0xC0,0x03,0x80,0x07,0x00,0x0F,0x00,0x1D,0x00,0x39,0x00,0x31,0x1C,0x31,0x1C,0x31,0x0C,0x31,0x0C,0x11,0x18,0x0D,0xE0,0x07,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00},/*"$",4*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x10,0x36,0x18,0x63,0x08,0x63,0x0C,0x63,0x04,0x63,0x04,0x63,0x02,0x63,0x02,0x63,0x01,0x36,0x1D,0x9C,0x37,0x80,0x22,0x80,0x63,0x40,0x63,0x40,0x63,0x20,0x63,0x20,0x63,0x30,0x63,0x10,0x22,0x18,0x36,0x08,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"%",5*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x00,0x98,0x01,0x8C,0x01,0x8C,0x01,0x8C,0x01,0x8C,0x01,0x8C,0x00,0xCC,0x00,0x78,0x00,0x18,0x3E,0x1C,0x08,0x36,0x08,0x32,0x08,0x63,0x04,0x63,0x04,0xC3,0x04,0xC3,0x03,0x83,0x43,0x06,0x43,0x8E,0x26,0x78,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"&",6*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x3C,0x00,0x3C,0x00,0x30,0x00,0x30,0x00,0x10,0x00,0x0C,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"'",7*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x0C,0x00,0x04,0x00,0x06,0x00,0x03,0x00,0x03,0x00,0x03,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x06,0x00,0x06,0x00,0x0C,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x40,0x00,0x00},/*"(",8*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x30,0x00,0x20,0x00,0x60,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0xC0,0x00,0xC0,0x00,0xC0,0x00,0x60,0x00,0x60,0x00,0x30,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x02,0x00,0x00,0x00},/*")",9*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x03,0x80,0x03,0x00,0x01,0x1C,0x71,0x3C,0x79,0x78,0x3D,0xC0,0x07,0x00,0x01,0xC0,0x07,0x78,0x3D,0x3C,0x79,0x1C,0x71,0x00,0x01,0x80,0x03,0x80,0x03,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"*",10*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0xFC,0x7F,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"+",11*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x3C,0x00,0x3C,0x00,0x30,0x00,0x30,0x00,0x10,0x00,0x0C,0x00,0x06,0x00},/*",",12*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"-",13*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x3C,0x00,0x3C,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*".",14*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x60,0x00,0x20,0x00,0x30,0x00,0x10,0x00,0x18,0x00,0x08,0x00,0x0C,0x00,0x04,0x00,0x06,0x00,0x02,0x00,0x03,0x00,0x01,0x80,0x01,0x80,0x00,0xC0,0x00,0x40,0x00,0x60,0x00,0x20,0x00,0x30,0x00,0x10,0x00,0x18,0x00,0x08,0x00,0x0C,0x00,0x04,0x00,0x06,0x00,0x02,0x00,0x00,0x00,0x00,0x00},/*"/",15*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x07,0x60,0x0C,0x30,0x18,0x18,0x30,0x18,0x30,0x18,0x20,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x18,0x20,0x18,0x30,0x18,0x30,0x30,0x18,0x60,0x0C,0xC0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"0",16*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x01,0xF8,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0xC0,0x03,0xF8,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"1",17*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x07,0x10,0x1C,0x08,0x18,0x04,0x30,0x04,0x30,0x0C,0x30,0x0C,0x30,0x00,0x30,0x00,0x18,0x00,0x08,0x00,0x04,0x00,0x02,0x00,0x01,0x80,0x00,0x40,0x00,0x20,0x20,0x10,0x20,0x08,0x20,0x04,0x30,0xFC,0x1F,0xFC,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"2",18*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x03,0x18,0x0E,0x0C,0x0C,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x00,0x18,0x00,0x0C,0x00,0x06,0xC0,0x03,0x00,0x0E,0x00,0x18,0x00,0x10,0x00,0x30,0x00,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x10,0x0C,0x18,0x18,0x0C,0xE0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"3",19*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x0E,0x00,0x0E,0x00,0x0F,0x80,0x0E,0x80,0x0E,0x40,0x0E,0x60,0x0E,0x20,0x0E,0x10,0x0E,0x10,0x0E,0x08,0x0E,0x04,0x0E,0x04,0x0E,0xFE,0x7F,0x00,0x0E,0x00,0x0E,0x00,0x0E,0x00,0x0E,0x00,0x0E,0x00,0x0E,0xC0,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"4",20*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x3F,0xF0,0x3F,0x10,0x00,0x10,0x00,0x10,0x00,0x08,0x00,0x08,0x00,0xC8,0x07,0x28,0x0C,0x18,0x18,0x08,0x10,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x0C,0x30,0x0C,0x30,0x04,0x18,0x04,0x18,0x08,0x0C,0xF0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"5",21*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0F,0xC0,0x10,0x20,0x30,0x10,0x30,0x18,0x00,0x18,0x00,0x08,0x00,0x0C,0x00,0x8C,0x0F,0x6C,0x18,0x3C,0x30,0x1C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x18,0x60,0x18,0x20,0x30,0x30,0x60,0x18,0xC0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"6",22*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x3F,0xF8,0x3F,0x1C,0x10,0x0C,0x08,0x04,0x08,0x04,0x04,0x00,0x04,0x00,0x02,0x00,0x02,0x00,0x01,0x00,0x01,0x00,0x01,0x80,0x00,0x80,0x00,0x80,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"7",23*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x07,0x30,0x0C,0x18,0x18,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x1C,0x30,0x38,0x18,0x70,0x08,0xE0,0x07,0xB0,0x07,0x18,0x0E,0x0C,0x1C,0x06,0x38,0x06,0x30,0x06,0x30,0x06,0x30,0x06,0x30,0x0C,0x18,0x18,0x0C,0xE0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"8",24*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x03,0x18,0x04,0x0C,0x08,0x0C,0x18,0x06,0x10,0x06,0x30,0x06,0x30,0x06,0x30,0x06,0x30,0x06,0x38,0x0C,0x3C,0x18,0x36,0xF0,0x31,0x00,0x30,0x00,0x18,0x00,0x18,0x00,0x18,0x0C,0x0C,0x0C,0x06,0x0C,0x03,0xF0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"9",25*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0xC0,0x03,0xC0,0x03,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0xC0,0x03,0xC0,0x03,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*":",26*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0xC0,0x00,0x80,0x00,0x80,0x00,0x40,0x00,0x40,0x00,0x00,0x00},/*";",27*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x06,0x00,0x03,0x80,0x01,0xC0,0x00,0x60,0x00,0x30,0x00,0x18,0x00,0x0C,0x00,0x18,0x00,0x30,0x00,0x60,0x00,0xC0,0x00,0x80,0x01,0x00,0x03,0x00,0x06,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"<",28*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"=",29*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x08,0x00,0x10,0x00,0x20,0x00,0x60,0x00,0xC0,0x00,0x80,0x01,0x00,0x03,0x00,0x06,0x00,0x0C,0x00,0x18,0x00,0x30,0x00,0x18,0x00,0x0C,0x00,0x06,0x00,0x03,0x80,0x01,0xC0,0x00,0x60,0x00,0x20,0x00,0x10,0x00,0x08,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*">",30*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x07,0x30,0x18,0x08,0x30,0x08,0x60,0x0C,0x60,0x1C,0x60,0x1C,0x60,0x1C,0x60,0x00,0x30,0x00,0x1C,0x00,0x06,0x00,0x01,0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0xC0,0x03,0xC0,0x03,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"?",31*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x07,0x60,0x18,0x10,0x30,0x18,0x20,0x0C,0x2F,0x8C,0x4D,0x86,0x4C,0xC6,0x4C,0xC6,0x4C,0x66,0x4C,0x66,0x44,0x66,0x44,0x66,0x26,0x66,0x26,0x66,0x15,0xCC,0x1C,0x0C,0x40,0x08,0x20,0x18,0x30,0x30,0x18,0xC0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"@",32*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xC0,0x01,0xC0,0x01,0xC0,0x01,0x40,0x01,0x60,0x03,0x20,0x03,0x20,0x03,0x20,0x03,0x30,0x06,0x10,0x06,0x10,0x06,0x10,0x06,0xF8,0x0F,0x08,0x0C,0x08,0x0C,0x08,0x0C,0x0C,0x0C,0x04,0x18,0x04,0x18,0x06,0x18,0x1F,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"A",33*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x07,0x18,0x1C,0x18,0x38,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x18,0x18,0x0C,0xF8,0x07,0x18,0x18,0x18,0x30,0x18,0x20,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x30,0x18,0x18,0xFE,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"B",34*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x27,0x60,0x38,0x10,0x30,0x18,0x20,0x0C,0x40,0x0C,0x40,0x04,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x0C,0x40,0x0C,0x40,0x0C,0x20,0x18,0x30,0x30,0x18,0xC0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"C",35*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x03,0x18,0x0E,0x18,0x18,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x30,0x18,0x30,0x18,0x10,0x18,0x18,0x18,0x0E,0xFE,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"D",36*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x3F,0x18,0x30,0x18,0x20,0x18,0x60,0x18,0x40,0x18,0x00,0x18,0x08,0x18,0x08,0x18,0x0C,0xF8,0x0F,0x18,0x0C,0x18,0x08,0x18,0x08,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x40,0x18,0x40,0x18,0x20,0x18,0x30,0xFE,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"E",37*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x7F,0x18,0x70,0x18,0x40,0x18,0xC0,0x18,0x80,0x18,0x00,0x18,0x10,0x18,0x10,0x18,0x18,0xF8,0x1F,0x18,0x18,0x18,0x10,0x18,0x10,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"F",38*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x13,0x70,0x1C,0x10,0x10,0x18,0x10,0x0C,0x20,0x0C,0x20,0x04,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0xFC,0x06,0x30,0x06,0x30,0x0C,0x30,0x0C,0x30,0x18,0x30,0x18,0x30,0x30,0x08,0xC0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"G",39*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x7E,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0xFC,0x1F,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x3F,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"H",40*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x1F,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0xF8,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"I",41*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x7F,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x0E,0x06,0x0E,0x03,0x8E,0x01,0xFC,0x00},/*"J",42*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x7C,0x18,0x18,0x18,0x08,0x18,0x04,0x18,0x06,0x18,0x02,0x18,0x01,0x98,0x01,0x98,0x01,0xD8,0x01,0xB8,0x03,0x38,0x03,0x18,0x07,0x18,0x06,0x18,0x0E,0x18,0x0C,0x18,0x1C,0x18,0x18,0x18,0x30,0x18,0x30,0x7E,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"K",43*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x40,0x18,0x40,0x18,0x20,0x18,0x30,0xFE,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"L",44*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xF8,0x1C,0x38,0x1C,0x38,0x1C,0x38,0x1C,0x3C,0x34,0x34,0x34,0x34,0x34,0x34,0x34,0x36,0x74,0x32,0x64,0x32,0x64,0x32,0x64,0x32,0x64,0x31,0xC4,0x31,0xC4,0x31,0xC4,0x31,0xC4,0x30,0xC4,0x30,0x84,0x30,0x9F,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"M",45*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x7C,0x1C,0x10,0x3C,0x10,0x34,0x10,0x34,0x10,0x74,0x10,0x64,0x10,0xE4,0x10,0xC4,0x10,0xC4,0x11,0x84,0x11,0x84,0x13,0x04,0x13,0x04,0x17,0x04,0x16,0x04,0x1E,0x04,0x1C,0x04,0x1C,0x04,0x1C,0x04,0x18,0x1F,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"N",46*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x03,0x30,0x0C,0x18,0x18,0x08,0x10,0x0C,0x30,0x0C,0x30,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x0C,0x20,0x0C,0x30,0x08,0x10,0x18,0x18,0x30,0x0C,0xC0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"O",47*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x0F,0x18,0x18,0x18,0x30,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x30,0x18,0x18,0xF8,0x0F,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"P",48*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x03,0x30,0x0C,0x18,0x18,0x0C,0x10,0x0C,0x30,0x0C,0x20,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0x06,0x60,0xE4,0x61,0x2C,0x33,0x1C,0x32,0x18,0x16,0x30,0x0E,0xC0,0x07,0x00,0x4C,0x00,0x7C,0x00,0x38,0x00,0x00,0x00,0x00},/*"Q",49*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x07,0x18,0x1C,0x18,0x38,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x18,0x18,0x0C,0xF8,0x07,0x98,0x03,0x18,0x03,0x18,0x07,0x18,0x06,0x18,0x06,0x18,0x0E,0x18,0x0C,0x18,0x0C,0x18,0x1C,0x18,0x18,0x7E,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"R",50*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x27,0x30,0x38,0x18,0x30,0x0C,0x20,0x0C,0x20,0x0C,0x00,0x0C,0x00,0x18,0x00,0x78,0x00,0xE0,0x03,0x80,0x0F,0x00,0x1E,0x00,0x38,0x00,0x70,0x00,0x60,0x04,0x60,0x04,0x60,0x08,0x60,0x18,0x30,0x38,0x18,0xC8,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"S",51*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x3F,0x8C,0x21,0x84,0x61,0x82,0x41,0x82,0x41,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0xE0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"T",52*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x7C,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x0C,0x10,0x08,0x08,0x38,0x04,0xE0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"U",53*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0xF8,0x18,0x20,0x18,0x20,0x18,0x20,0x30,0x10,0x30,0x10,0x30,0x10,0x30,0x10,0x60,0x08,0x60,0x08,0x60,0x08,0xE0,0x0C,0xC0,0x04,0xC0,0x04,0xC0,0x04,0x80,0x03,0x80,0x03,0x80,0x03,0x80,0x03,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"V",54*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDF,0xF3,0x86,0x61,0x86,0x21,0x86,0x21,0x8C,0x21,0x0C,0x21,0x8C,0x23,0x8C,0x13,0x8C,0x13,0x8C,0x13,0x4C,0x13,0x58,0x12,0x58,0x16,0x58,0x0E,0x38,0x0E,0x38,0x0E,0x38,0x0E,0x30,0x0C,0x10,0x04,0x10,0x04,0x10,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"W",55*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x3E,0x18,0x08,0x38,0x08,0x30,0x04,0x30,0x04,0x70,0x02,0x60,0x02,0xE0,0x01,0xC0,0x01,0xC0,0x01,0x80,0x01,0x80,0x03,0x40,0x03,0x40,0x07,0x20,0x06,0x20,0x06,0x10,0x0C,0x10,0x0C,0x08,0x18,0x08,0x18,0x3E,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"X",56*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x7C,0x1C,0x10,0x18,0x10,0x18,0x08,0x30,0x08,0x30,0x0C,0x70,0x04,0x60,0x04,0x60,0x02,0xC0,0x02,0xC0,0x02,0xC0,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0xE0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"Y",57*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x3F,0x18,0x18,0x08,0x18,0x04,0x0C,0x04,0x0E,0x00,0x06,0x00,0x07,0x00,0x03,0x80,0x03,0x80,0x01,0xC0,0x01,0xC0,0x00,0xE0,0x00,0x60,0x00,0x70,0x00,0x30,0x00,0x38,0x20,0x18,0x20,0x1C,0x10,0x0C,0x18,0xFE,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"Z",58*/
{0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x3F,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x00,0xC0,0x3F,0x00,0x00,0x00,0x00},/*"[",59*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x18,0x00,0x18,0x00,0x10,0x00,0x30,0x00,0x20,0x00,0x60,0x00,0x60,0x00,0x40,0x00,0xC0,0x00,0x80,0x00,0x80,0x01,0x80,0x01,0x00,0x01,0x00,0x03,0x00,0x02,0x00,0x06,0x00,0x06,0x00,0x04,0x00,0x0C,0x00,0x08,0x00,0x18,0x00,0x18,0x00,0x10,0x00,0x30,0x00,0x20,0x00,0x00},/*"\",60*/
{0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x03,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0xFC,0x03,0x00,0x00,0x00,0x00},/*"]",61*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x07,0xC0,0x06,0x20,0x08,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"^",62*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF},/*"_",63*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0xC0,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"`",64*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x03,0x18,0x06,0x0C,0x0C,0x0C,0x0C,0x00,0x0C,0x80,0x0F,0x70,0x0C,0x1C,0x0C,0x0C,0x0C,0x06,0x0C,0x06,0x0C,0x06,0x4C,0x0C,0x4F,0xF8,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"a",65*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x1E,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x0F,0xD8,0x18,0x38,0x30,0x38,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x20,0x38,0x30,0x78,0x18,0xC8,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"b",66*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x07,0x70,0x0C,0x18,0x18,0x18,0x18,0x0C,0x18,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x0C,0x20,0x18,0x20,0x18,0x10,0x30,0x08,0xC0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"c",67*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x1E,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0xE0,0x1B,0x30,0x1C,0x18,0x18,0x18,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x0C,0x18,0x08,0x18,0x18,0x1C,0x30,0x7A,0xE0,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"d",68*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x07,0x30,0x0C,0x18,0x18,0x08,0x10,0x0C,0x30,0x0C,0x30,0xFC,0x3F,0x0C,0x00,0x0C,0x00,0x0C,0x00,0x18,0x20,0x18,0x10,0x70,0x18,0xC0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"e",69*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x80,0xC3,0x80,0xC0,0xC0,0xC0,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xFC,0x1F,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xF8,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"f",70*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x77,0x30,0x6C,0x10,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x10,0x18,0x30,0x0C,0xF0,0x07,0x18,0x00,0x18,0x00,0xF0,0x0F,0xF0,0x3F,0x08,0x70,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x38,0x38,0xE0,0x0F},/*"g",71*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x1E,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x98,0x0F,0xD8,0x18,0x38,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x7E,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"h",72*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x03,0x80,0x03,0x80,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xF8,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0xF8,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"i",73*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x38,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x80,0x1F,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x18,0x0C,0x18,0x06,0xF0,0x03},/*"j",74*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x1E,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x3E,0x18,0x0C,0x18,0x06,0x18,0x03,0x18,0x01,0x98,0x01,0xD8,0x01,0x38,0x03,0x18,0x07,0x18,0x06,0x18,0x0C,0x18,0x1C,0x18,0x18,0x7E,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"k",75*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xF8,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x01,0xF8,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"l",76*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0xEE,0x1C,0x9C,0x33,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0x8C,0x31,0xDE,0x7B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"m",77*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x1E,0x0F,0xD8,0x18,0x38,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x7E,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"n",78*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x07,0x70,0x1C,0x10,0x30,0x18,0x30,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x0C,0x60,0x18,0x30,0x18,0x30,0x30,0x18,0xC0,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"o",79*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x9E,0x0F,0x58,0x18,0x38,0x30,0x18,0x20,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x60,0x18,0x30,0x38,0x30,0x78,0x18,0x98,0x07,0x18,0x00,0x18,0x00,0x18,0x00,0x18,0x00,0x7E,0x00},/*"p",80*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x23,0x30,0x3C,0x18,0x38,0x18,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x0C,0x30,0x08,0x30,0x18,0x38,0x30,0x3C,0xE0,0x33,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0x30,0x00,0xFC},/*"q",81*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x7E,0x3C,0x60,0x66,0x60,0x61,0xE0,0x00,0xE0,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0x60,0x00,0xFE,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"r",82*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x27,0x30,0x38,0x18,0x30,0x18,0x20,0x18,0x00,0x70,0x00,0xE0,0x03,0x80,0x0F,0x00,0x1C,0x04,0x30,0x04,0x30,0x0C,0x30,0x1C,0x18,0xEC,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"s",83*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x80,0x00,0x80,0x00,0xC0,0x00,0xE0,0x00,0xFC,0x1F,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x00,0xC0,0x20,0xC0,0x20,0x80,0x11,0x00,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"t",84*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x20,0x1E,0x3C,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x30,0x18,0x38,0x30,0xF4,0xE0,0x13,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"u",85*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x3C,0x18,0x18,0x18,0x08,0x38,0x08,0x30,0x04,0x30,0x04,0x70,0x02,0x60,0x02,0x60,0x02,0xE0,0x01,0xC0,0x01,0xC0,0x01,0xC0,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"v",86*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDF,0xF7,0x8E,0x63,0x0C,0x23,0x8C,0x23,0x8C,0x23,0x98,0x13,0x98,0x13,0x58,0x16,0x58,0x16,0x70,0x0E,0x70,0x0E,0x70,0x0E,0x20,0x04,0x20,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"w",87*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x3E,0x70,0x08,0x70,0x04,0xE0,0x04,0xC0,0x02,0xC0,0x01,0x80,0x03,0x80,0x03,0x40,0x07,0x60,0x06,0x20,0x0C,0x10,0x0C,0x18,0x18,0x3E,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"x",88*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x7C,0x18,0x18,0x18,0x08,0x30,0x08,0x30,0x08,0x30,0x04,0x60,0x04,0x60,0x04,0xC0,0x02,0xC0,0x02,0xC0,0x02,0x80,0x01,0x80,0x01,0x80,0x01,0x80,0x00,0x80,0x00,0x80,0x00,0x4C,0x00,0x3C,0x00},/*"y",89*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x1F,0x0C,0x0C,0x04,0x0E,0x04,0x06,0x00,0x03,0x80,0x03,0x80,0x01,0xC0,0x00,0xE0,0x00,0x70,0x20,0x30,0x20,0x38,0x30,0x1C,0x18,0xFC,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"z",90*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x08,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x02,0x80,0x01,0x00,0x02,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x08,0x00,0x30,0x00,0x00},/*"{",91*/
{0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01},/*"|",92*/
{0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x10,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x40,0x00,0x80,0x01,0x40,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x20,0x00,0x10,0x00,0x0C,0x00,0x00,0x00},/*"}",93*/
{0x00,0x00,0x38,0x00,0xC4,0x00,0x86,0x40,0x02,0x61,0x00,0x22,0x00,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"~",94*/
};

void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode,uint8_t ChipSelect)
{
  uint8_t temp, sizex, t, m = 0;
  uint16_t i, TypefaceNum;//
  uint16_t x0 = x;
  sizex = sizey / 2;
  TypefaceNum = ( sizex / 8 + ( ( sizex % 8 ) ? 1:0 ) ) * sizey;
  num = num - ' ';    //
  LCD_Address_Set( x, y, x + sizex - 1, y + sizey - 1, ChipSelect );  //
  for( i = 0; i < TypefaceNum; i ++ ){ 
    if(sizey == 16)temp = ascii_1608[num][i];     //
    else if( sizey == 24 ) temp = ascii_2412[num][i];     //
    else if(sizey==32)temp=ascii_3216[num][i];   
    else return;
    for( t = 0; t < 8; t ++ ){
      if( !mode ){
        if( temp & ( 0x01 << t ) ) LCD_WR_DATA( fc, ChipSelect );
        else LCD_WR_DATA( bc, ChipSelect );
        m++;
        if( m % sizex == 0 ){
          m = 0; break;
        }
      }
      else{
        if( temp & ( 0x01 << t ) ) LCD_DrawPoint( x, y, fc, ChipSelect );
        x++;
        if( ( x - x0 ) == sizex ){
          x = x0;
          y++;
          break;
        }
      }
    }
  }         
}

void LCD_ShowString(uint16_t x,uint16_t y,const char *p,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode, uint8_t ChipSelect)
{         
  while( *p != '\0' ){       
    LCD_ShowChar( x, y, *p, fc, bc, sizey, mode, ChipSelect);
    x += sizey / 2;
    p++;
  }  
}

typedef struct 
{
  unsigned char Index[4]; 
  unsigned char Msk[128];
}typFNT_GB32; 

const typFNT_GB32 tfont32[]={
"阳",0x00,0xE0,0x07,0x00,0x00,0xE0,0x07,0x00,0x00,0xE0,0x07,0x00,0x70,0xE0,0x07,0x0E,
0xF8,0xC1,0x83,0x1F,0xF8,0xFD,0xBF,0x1F,0xF8,0xFD,0xBF,0x1F,0xF0,0xFF,0xFF,0x0F,
0xF0,0xFF,0xFF,0x0F,0xB0,0xFF,0xFF,0x01,0xE0,0xFF,0xFF,0x07,0xE0,0xFF,0xFF,0x07,
0xE1,0xFF,0xFF,0x07,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE1,0xFF,0xFF,0xC7,
0xE0,0xFF,0xFF,0x07,0xE0,0xFF,0xFF,0x07,0xB0,0xFF,0xFF,0x01,0xF0,0xFF,0xFF,0x0F,
0xF0,0xFF,0xFF,0x0F,0xF8,0xFD,0xBF,0x1F,0xF8,0xFD,0xBF,0x1F,0xF8,0xC1,0x23,0x1F,
0x70,0xE0,0x07,0x0E,0x00,0xE0,0x07,0x00,0x00,0xE0,0x07,0x00,0x00,0xE0,0x07,0x00,/*"E:\我的项目\时钟\天气图标\sunny.bmp",0*/  

"度",0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x00,0x00,
0x80,0x3F,0x00,0x00,0xC0,0x60,0x00,0x00,0xC0,0x60,0x00,0x00,0x60,0xC0,0x00,0x00,
0x60,0xC0,0x00,0x00,0x60,0xC0,0x00,0x00,0xC0,0x60,0x00,0x00,0xC0,0x60,0x00,0x00,
0x80,0x3F,0x00,0x00,0x00,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"E:\我的项目\时钟\天气图标\c.BMP",0*/

};

void LCD_ShowChinese32x32(uint16_t x,uint16_t y,const char *s,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode, uint8_t ChipSelect)
{
  uint8_t i,j,m=0;
  uint16_t k;
  uint16_t HZnum;//
  uint16_t TypefaceNum;//
  uint16_t x0=x;
  TypefaceNum=(sizey/8+((sizey%8)?1:0))*sizey;
  HZnum=sizeof(tfont32)/sizeof(typFNT_GB32);  //Í³¼Æºº×ÖÊýÄ¿
  for(k=0;k<HZnum;k++) {
    if ((tfont32[k].Index[0]==*(s))&&(tfont32[k].Index[1]==*(s+1))){   
      LCD_Address_Set(x,y,x+sizey-1,y+sizey-1,ChipSelect);
      for(i=0;i<TypefaceNum;i++){
        for(j=0;j<8;j++){ 
          if(!mode){
            if(tfont32[k].Msk[i]&(0x01<<j)) LCD_WR_DATA(fc,ChipSelect);
            else LCD_WR_DATA(bc, ChipSelect);
            m++;
            if(m%sizey==0){
              m=0; break;
            }
          }
          else {
            if(tfont32[k].Msk[i]&(0x01<<j)) LCD_DrawPoint(x,y,fc,ChipSelect);
            x++;
            if((x-x0)==sizey) {
              x=x0; y++; break;
            }
          }
        }
      }
    }           
    continue; 
  }
}

typedef struct 
{
  unsigned char Index[4]; 
  unsigned char Msk[72];
}typFNT_GB24; 

const typFNT_GB24 tfont24[]={
"度",0x00,0x00,0x00,0x60,0x00,0x00,0xF0,0x00,0x00,0x98,0x01,0x00,0x98,0x01,0x00,0xF0,
0x80,0x03,0x60,0xC0,0x07,0x00,0x60,0x0C,0x00,0x30,0x00,0x00,0x30,0x00,0x00,0x30,
0x00,0x00,0x30,0x00,0x00,0x30,0x00,0x00,0x30,0x00,0x00,0x30,0x00,0x00,0x30,0x00,
0x00,0x30,0x00,0x00,0x30,0x00,0x00,0x60,0x0C,0x00,0xC0,0x07,0x00,0x80,0x03,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"E:\我的项目\时钟\天气图标\C.BMP",0*/
};

void LCD_ShowChinese24x24(uint16_t x,uint16_t y,const char *s,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode,uint8_t ChipSelect)
{
  uint8_t i,j,m=0;
  uint16_t k;
  uint16_t HZnum;
  uint16_t TypefaceNum;
  uint16_t x0=x;
  TypefaceNum=(sizey/8+((sizey%8)?1:0))*sizey;
  HZnum=sizeof(tfont24)/sizeof(typFNT_GB24);  //Í³¼Æºº×ÖÊýÄ¿
  for(k=0;k<HZnum;k++) {
    if ((tfont24[k].Index[0]==*(s))&&(tfont24[k].Index[1]==*(s+1))) {   
      LCD_Address_Set(x,y,x+sizey-1,y+sizey-1,ChipSelect);
      for(i=0;i<TypefaceNum;i++){
        for(j=0;j<8;j++){ 
          if(!mode){
            if(tfont24[k].Msk[i]&(0x01<<j)) LCD_WR_DATA(fc,ChipSelect);
            else LCD_WR_DATA(bc,ChipSelect);
            m++;
            if(m%sizey==0){
              m=0; break;
            }
          }
          else{
            if(tfont24[k].Msk[i]&(0x01<<j)) LCD_DrawPoint(x,y,fc,ChipSelect);//»­Ò»¸öµã
            x++;
            if((x-x0)==sizey){
              x=x0; y++; break;
            }
          }
        }
      }
    }           
    continue;  
  }
} 

void bootAnimation()
{
    LCD_ShowString( 2, 5, "Dr.Puffer", WHITE, BLACK, 24, 1, 1 );
    LCD_ShowString( 2, 5, "Dr.Puffer", WHITE, BLACK, 24, 1, 2 );
    LCD_ShowString( 2, 5, "Dr.Puffer", WHITE, BLACK, 24, 1, 3 );
    LCD_ShowString( 2, 5, "Dr.Puffer", WHITE, BLACK, 24, 1, 4 );
    LCD_ShowString( 2, 5, "Dr.Puffer", WHITE, BLACK, 24, 1, 5 );
    LCD_ShowString( 2, 5, "Dr.Puffer", WHITE, BLACK, 24, 1, 6 );
    
    LCD_ShowString( 2, 32, "BOOTING...", WHITE, BLACK, 24, 1, 1 );
    LCD_ShowString( 2, 32, "BOOTING...", WHITE, BLACK, 24, 1, 2 );
    LCD_ShowString( 2, 32, "BOOTING...", WHITE, BLACK, 24, 1, 3 );
    LCD_ShowString( 2, 32, "BOOTING...", WHITE, BLACK, 24, 1, 4 );
    LCD_ShowString( 2, 32, "BOOTING...", WHITE, BLACK, 24, 1, 5 );
    LCD_ShowString( 2, 32, "BOOTING...", WHITE, BLACK, 24, 1, 6 );
    delay( 80);
    LCD_ShowString( 2, 60, "INIT System...", WHITE, BLACK, 16, 1, 1 );
    LCD_ShowString( 2, 60, "INIT System...", WHITE, BLACK, 16, 1, 2 );
    LCD_ShowString( 2, 60, "INIT System...", WHITE, BLACK, 16, 1, 3 );
    LCD_ShowString( 2, 60, "INIT System...", WHITE, BLACK, 16, 1, 4 );
    LCD_ShowString( 2, 60, "INIT System...", WHITE, BLACK, 16, 1, 5 );
    LCD_ShowString( 2, 60, "INIT System...", WHITE, BLACK, 16, 1, 6 );
    delay( 80 );
    LCD_ShowString( 2, 80, "INIT SDCard...", WHITE, BLACK, 16, 1, 1 );
    LCD_ShowString( 2, 80, "INIT SDCard...", WHITE, BLACK, 16, 1, 2 );
    LCD_ShowString( 2, 80, "INIT SDCard...", WHITE, BLACK, 16, 1, 3 );
    LCD_ShowString( 2, 80, "INIT SDCard...", WHITE, BLACK, 16, 1, 4 );
    LCD_ShowString( 2, 80, "INIT SDCard...", WHITE, BLACK, 16, 1, 5 );
    LCD_ShowString( 2, 80, "INIT SDCard...", WHITE, BLACK, 16, 1, 6 );
    delay( 80 );
    LCD_ShowString( 2, 100, "INIT Wifi...", WHITE, BLACK, 16, 1, 1 );
    LCD_ShowString( 2, 100, "INIT Wifi...", WHITE, BLACK, 16, 1, 2 );
    LCD_ShowString( 2, 100, "INIT Wifi...", WHITE, BLACK, 16, 1, 3 );
    LCD_ShowString( 2, 100, "INIT Wifi...", WHITE, BLACK, 16, 1, 4 );
    LCD_ShowString( 2, 100, "INIT Wifi...", WHITE, BLACK, 16, 1, 5 );
    LCD_ShowString( 2, 100, "INIT Wifi...", WHITE, BLACK, 16, 1, 6 );
    delay( 80 );
    LCD_ShowString( 2, 120, "INIT Clock...", WHITE, BLACK, 16, 1, 1 );
    LCD_ShowString( 2, 120, "INIT Clock...", WHITE, BLACK, 16, 1, 2 );
    LCD_ShowString( 2, 120, "INIT Clock...", WHITE, BLACK, 16, 1, 3 );
    LCD_ShowString( 2, 120, "INIT Clock...", WHITE, BLACK, 16, 1, 4 );
    LCD_ShowString( 2, 120, "INIT Clock...", WHITE, BLACK, 16, 1, 5 );
    LCD_ShowString( 2, 120, "INIT Clock...", WHITE, BLACK, 16, 1, 6 );
    delay( 80 );
    LCD_ShowString( 2, 140, "LOADING NetWork...", WHITE, BLACK, 16, 1, 1 );
    LCD_ShowString( 2, 140, "LOADING NetWork...", WHITE, BLACK, 16, 1, 2 );
    LCD_ShowString( 2, 140, "LOADING NetWork...", WHITE, BLACK, 16, 1, 3 );
    LCD_ShowString( 2, 140, "LOADING NetWork...", WHITE, BLACK, 16, 1, 4 );
    LCD_ShowString( 2, 140, "LOADING NetWork...", WHITE, BLACK, 16, 1, 5 );
    LCD_ShowString( 2, 140, "LOADING NetWork...", WHITE, BLACK, 16, 1, 6 );
    delay( 80 );
    LCD_ShowString( 2, 160, "LOADING SDCard...", WHITE, BLACK, 16, 1, 1 );
    LCD_ShowString( 2, 160, "LOADING SDCard...", WHITE, BLACK, 16, 1, 2 );
    LCD_ShowString( 2, 160, "LOADING SDCard...", WHITE, BLACK, 16, 1, 3 );
    LCD_ShowString( 2, 160, "LOADING SDCard...", WHITE, BLACK, 16, 1, 4 );
    LCD_ShowString( 2, 160, "LOADING SDCard...", WHITE, BLACK, 16, 1, 5 );
    LCD_ShowString( 2, 160, "LOADING SDCard...", WHITE, BLACK, 16, 1, 6 );
    delay( 80 );
    LCD_ShowString( 2, 180, "LOADING Clock...", WHITE, BLACK, 16, 1, 1 );
    LCD_ShowString( 2, 180, "LOADING Clock...", WHITE, BLACK, 16, 1, 2 );
    LCD_ShowString( 2, 180, "LOADING Clock...", WHITE, BLACK, 16, 1, 3 );
    LCD_ShowString( 2, 180, "LOADING Clock...", WHITE, BLACK, 16, 1, 4 );
    LCD_ShowString( 2, 180, "LOADING Clock...", WHITE, BLACK, 16, 1, 5 );
    LCD_ShowString( 2, 180, "LOADING Clock...", WHITE, BLACK, 16, 1, 6 );
    delay( 80 );
    for( int i = 2; i < 132; i += 10 ){
        LCD_ShowChar( i, 210, '>', WHITE, BLACK, 16, 1, 1 );
        LCD_ShowChar( i, 210, '>', WHITE, BLACK, 16, 1, 2 );
        LCD_ShowChar( i, 210, '>', WHITE, BLACK, 16, 1, 3 );
        LCD_ShowChar( i, 210, '>', WHITE, BLACK, 16, 1, 4 );
        LCD_ShowChar( i, 210, '>', WHITE, BLACK, 16, 1, 5 );
        LCD_ShowChar( i, 210, '>', WHITE, BLACK, 16, 1, 6 );
        delay( 80 );
    }
}

void getWeatherAtPresent()
{
  if (WiFi.status() == WL_CONNECTED) { //如果 Wi-Fi 连接成功
  
  //心知API的网址，使用时使用自己注册的私钥
  http.begin("https://api.seniverse.com/v3/weather/now.json?key=S8zB7JcfKXG5Tc7pM&location=shanghai&language=zh-Hans&unit=c");
   
  int httpget_now = http.GET(); //赋值
    if (httpget_now == HTTP_CODE_OK) { //检查一下是否为0，应该是去检查缓存区是否为空
      String respone =  http.getString();
     // Serial.println(respone);
      
      StaticJsonDocument<512> doc;
      deserializeJson(doc, respone);     
      JsonObject results_0 = doc["results"][0];
         
      JsonObject results_0_now = results_0["now"];
      const char* results_0_now_text = results_0_now["text"]; // "晴"
      const char* results_0_now_code = results_0_now["code"]; // "0"
      const char* results_0_now_temperature = results_0_now["temperature"]; // "7"
      
     // const char* results_0_last_update = results_0["last_update"]; // "2021-01-19T09:50:00+08:00"

      if( !strcmp( results_0_now_code, "0" ) || !strcmp( results_0_now_code, "0" ) ){
        LCD_ShowString( 35, 190, "Sunny", WHITE, BLACK, 24, 1, 1 );
      }
      else if( !strcmp( results_0_now_code, "4" ) || !strcmp( results_0_now_code, "5" )|| !strcmp( results_0_now_code, "6" ) || !strcmp( results_0_now_code, "7" ) || !strcmp( results_0_now_code, "8" ) ){
        LCD_ShowString( 30, 190, "Cloudy", WHITE, BLACK, 24, 1, 1 );
      }
      else if( !strcmp( results_0_now_code, "9" ) ){
        LCD_ShowString( 15, 190, "Overcast", WHITE, BLACK, 24, 1, 1 );
      }
      else if( !strcmp( results_0_now_code, "10" ) ){
        LCD_ShowString( 30, 190, "Shower", WHITE, BLACK, 24, 1, 1 );
      }
      else if( !strcmp( results_0_now_code, "13" ) ){
        LCD_ShowString( 10, 190, "LightRain", WHITE, BLACK, 24, 1, 1 );
      }
      else if( !strcmp( results_0_now_code, "14" ) ){
        LCD_ShowString( 0, 190, "ModerateRain", WHITE, BLACK, 24, 1, 1 );
      }
      else if( !strcmp( results_0_now_code, "15" ) ){
        LCD_ShowString( 5, 190, "HeavyRain", WHITE, BLACK, 24, 1, 1 );
      }
      else if( !strcmp( results_0_now_code, "16" ) ){
        LCD_ShowString( 35, 190, "Storm", WHITE, BLACK, 24, 1, 1 );
      }
      else {
      }
      LCD_ShowString( 50, 60, results_0_now_temperature, WHITE, BLACK, 32, 1, 1 );
      
      http.end();
      delay(100);
    }
  }
}

void getWeatherOfNextThreeDays()
{
  if (WiFi.status() == WL_CONNECTED) { //如果 Wi-Fi 连接成功
  //此处往下是取得今天和未来三天天气的程序
  http.begin("https://api.seniverse.com/v3/weather/daily.json?key=S8zB7JcfKXG5Tc7pM&location=shanghai&language=zh-Hans&unit=c&start=0&days=5");
   
  int httpget_now = http.GET(); //赋值
    if (httpget_now == HTTP_CODE_OK) { //检查一下是否为0，应该是去检查缓存区是否为空
      String respone =  http.getString();
 //     Serial.println(respone);
      StaticJsonDocument<1536> doc;
      deserializeJson(doc, respone);  
      JsonObject results_0 = doc["results"][0];    
      JsonObject results_0_location = results_0["location"];
      int i = 0;
      for (JsonObject elem : results_0["daily"].as<JsonArray>()) {  
        i ++;
        const char* date = elem["date"]; // "2021-01-19", "2021-01-20", "2021-01-21"
        const char* text_day = elem["text_day"]; // "晴", "阴", "多云"
        const char* code_day = elem["code_day"]; // "0", "9", "4"
        const char* text_night = elem["text_night"]; // "多云", "多云", "阴"
        const char* code_night = elem["code_night"]; // "4", "4", "9"
        const char* high = elem["high"]; // "10", "13", "17"
        const char* low = elem["low"]; // "5", "5", "11"
        const char* rainfall = elem["rainfall"]; // "0.0", "0.0", "0.3"
        const char* precip = elem["precip"]; // "", "", ""
        const char* wind_direction = elem["wind_direction"]; // "东南", "东南", "北"
        const char* wind_direction_degree = elem["wind_direction_degree"]; // "135", "135", "0"
        const char* wind_speed = elem["wind_speed"]; // "3.0", "8.4", "3.0"
        const char* wind_scale = elem["wind_scale"]; // "1", "2", "1"
        const char* humidity = elem["humidity"]; // "57", "72", "75"
        if( i == 1 ){
          LCD_ShowString( 25, 90, low, WHITE, BLACK, 24, 1, 1 );
          LCD_ShowString( 50, 90, "-", WHITE, BLACK, 24, 1, 1 );
          LCD_ShowString( 78, 90, high, WHITE, BLACK, 24, 1, 1 );
        }
        else if( i == 2 ){
          if( !strcmp( code_day, "0" ) ){
            LCD_ShowString( 35, 60, "Sunny", BRED, BLACK, 24, 1, 2 );
          }
          else if( !strcmp( code_day, "4" ) || !strcmp( code_day, "5" )|| !strcmp( code_day, "6" ) || !strcmp( code_day, "7" ) || !strcmp( code_day, "8" ) ){
            LCD_ShowString( 30, 60, "Cloudy", BRED, BLACK, 24, 1, 2 );
          }
          else if( !strcmp( code_day, "9" ) ){
            LCD_ShowString( 15, 60, "Overcast", BRED, BLACK, 24, 1, 2 );
          }
          else if( !strcmp( code_day, "10" ) ){
            LCD_ShowString( 30, 60, "Shower", BRED, BLACK, 24, 1, 2 );
          }
          else if( !strcmp( code_day, "13" ) ){
            LCD_ShowString( 10, 60, "LightRain", BRED, BLACK, 24, 1, 2 );
          }
          else if( !strcmp( code_day, "14" ) ){
            LCD_ShowString( 0, 60, "ModerateRain", BRED, BLACK, 24, 1, 2 );
          }
          else if( !strcmp( code_day, "15" ) ){
            LCD_ShowString( 5, 60, "HeavyRain", BRED, BLACK, 24, 1, 2 );
          }
          else if( !strcmp( code_day, "16" ) ){
            LCD_ShowString( 35, 60, "Storm", BRED, BLACK, 24, 1, 2 );
          }
          else {
            
          }
          LCD_ShowString( 25, 110, low, BRED, BLACK, 24, 1, 2 );
          LCD_ShowString( 52, 110, "-", BRED, BLACK, 24, 1, 2 );
          LCD_ShowString( 82, 110, high, BRED, BLACK, 24, 1, 2 );
          
          LCD_ShowString( 40, 160, wind_speed, BRED, BLACK, 24, 1, 2 );
          LCD_ShowString( 45, 210, humidity, BRED, BLACK, 24, 1, 2 );
        }
      } 
      http.end();
      delay(100);
    }
  }
}

void weatherInitDisplay()
{
  readFile( SD, "/weather1.bin", data1 ); 
  LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 1);
  LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 2);
  LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 3);

  LCD_ShowString( 30, 2, "Today", GRED, BLACK, 32, 1, 1 );
  //LCD_ShowString( 48, 60, "12", WHITE, BLACK, 32, 1, 1 );
  LCD_ShowChinese32x32(80,60,"度",WHITE,BLACK, 32, 1, 1);
  //LCD_ShowString( 30, 90, "4 - 30", WHITE, BLACK, 24, 1, 1 );
  LCD_ShowChinese24x24(105,90,"度",WHITE,BLACK, 24, 1, 1);
  
  LCD_ShowChinese32x32(50,150,"阳",GRED,BLACK, 32, 1, 1);
  //LCD_ShowString( 38, 190, "Sunny", WHITE, BLACK, 24, 1, 1 );
  
  LCD_ShowString( 5, 2, "Tomorrow", GRED, BLACK, 32, 1, 2 );
  LCD_ShowString( 2, 35, "Weather", WHITE, BLACK, 24, 1, 2 );
  LCD_ShowString( 2, 85, "Temperature", WHITE, BLACK, 24, 1, 2 );
  LCD_ShowChinese24x24(105, 110, "度", BRED, BLACK, 24, 1, 2);
  LCD_ShowString( 2, 135, "WindSpeed", WHITE, BLACK, 24, 1, 2 );
  LCD_ShowString( 2, 185, "Humidity", WHITE, BLACK, 24, 1, 2 );
  
  getWeatherAtPresent();
  getWeatherOfNextThreeDays();
}

void displaySecond( int second )
{
  int shi = second / 10;
  int ge = second % 10;  
  if( Mode == 1 ){
    switch( shi ){
      case 0: { readFile( SD, imageName0, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 5); break; } 
      case 1: { readFile( SD, imageName1, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 5); break; } 
      case 2: { readFile( SD, imageName2, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 5); break; } 
      case 3: { readFile( SD, imageName3, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 5); break; } 
      case 4: { readFile( SD, imageName4, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 5); break; } 
      case 5: { readFile( SD, imageName5, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 5); break; } 
      default: break;
    }
    switch( ge ){
      case 0: { readFile( SD, imageName0, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 6); break; } 
      case 1: { readFile( SD, imageName1, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 6); break; }
      case 2: { readFile( SD, imageName2, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 6); break; }
      case 3: { readFile( SD, imageName3, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 6); break; }
      case 4: { readFile( SD, imageName4, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 6); break; }
      case 5: { readFile( SD, imageName5, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 6); break; }
      case 6: { readFile( SD, imageName6, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 6); break; }
      case 7: { readFile( SD, imageName7, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 6); break; }
      case 8: { readFile( SD, imageName8, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 6); break; }
      case 9: { readFile( SD, imageName9, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 6); break; }
      default: break;
    }
  }
  else if( Mode == 2 ){
    switch( shi ){
      case 0: { readFile( SD, imageHalf0, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 6); break; } 
      case 1: { readFile( SD, imageHalf1, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 6); break; } 
      case 2: { readFile( SD, imageHalf2, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 6); break; } 
      case 3: { readFile( SD, imageHalf3, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 6); break; } 
      case 4: { readFile( SD, imageHalf4, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 6); break; } 
      case 5: { readFile( SD, imageHalf5, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 6); break; } 
      default: break;
    }
    switch( ge ){
      case 0: { readFile( SD, imageHalf0, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 6); break; } 
      case 1: { readFile( SD, imageHalf1, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 6); break; }
      case 2: { readFile( SD, imageHalf2, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 6); break; }
      case 3: { readFile( SD, imageHalf3, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 6); break; }
      case 4: { readFile( SD, imageHalf4, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 6); break; }
      case 5: { readFile( SD, imageHalf5, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 6); break; }
      case 6: { readFile( SD, imageHalf6, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 6); break; }
      case 7: { readFile( SD, imageHalf7, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 6); break; }
      case 8: { readFile( SD, imageHalf8, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 6); break; }
      case 9: { readFile( SD, imageHalf9, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 6); break; }
      default: break;
    }    
  }
}

void displayMinute( int minute )
{
  int shi = minute / 10;
  int ge = minute % 10;  
  if( Mode == 1 ){
    switch( shi ){
      case 0: { readFile( SD, imageName0, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 3); break; } 
      case 1: { readFile( SD, imageName1, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 3); break; } 
      case 2: { readFile( SD, imageName2, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 3); break; } 
      case 3: { readFile( SD, imageName3, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 3); break; } 
      case 4: { readFile( SD, imageName4, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 3); break; } 
      case 5: { readFile( SD, imageName5, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 3); break; } 
      default: break;
    }
    switch( ge ){
      case 0: { readFile( SD, imageName0, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 4); break; } 
      case 1: { readFile( SD, imageName1, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 4); break; }
      case 2: { readFile( SD, imageName2, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 4); break; }
      case 3: { readFile( SD, imageName3, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 4); break; }
      case 4: { readFile( SD, imageName4, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 4); break; }
      case 5: { readFile( SD, imageName5, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 4); break; }
      case 6: { readFile( SD, imageName6, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 4); break; }
      case 7: { readFile( SD, imageName7, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 4); break; }
      case 8: { readFile( SD, imageName8, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 4); break; }
      case 9: { readFile( SD, imageName9, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 4); break; }
      default: break;
    }
  }
  else if( Mode == 2 ){
    switch( shi ){
      case 0: { readFile( SD, imageHalf0, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 5); break; } 
      case 1: { readFile( SD, imageHalf1, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 5); break; } 
      case 2: { readFile( SD, imageHalf2, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 5); break; } 
      case 3: { readFile( SD, imageHalf3, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 5); break; } 
      case 4: { readFile( SD, imageHalf4, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 5); break; } 
      case 5: { readFile( SD, imageHalf5, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 5); break; } 
      default: break;
    }
    switch( ge ){
      case 0: { readFile( SD, imageHalf0, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 5); break; } 
      case 1: { readFile( SD, imageHalf1, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 5); break; }
      case 2: { readFile( SD, imageHalf2, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 5); break; }
      case 3: { readFile( SD, imageHalf3, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 5); break; }
      case 4: { readFile( SD, imageHalf4, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 5); break; }
      case 5: { readFile( SD, imageHalf5, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 5); break; }
      case 6: { readFile( SD, imageHalf6, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 5); break; }
      case 7: { readFile( SD, imageHalf7, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 5); break; }
      case 8: { readFile( SD, imageHalf8, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 5); break; }
      case 9: { readFile( SD, imageHalf9, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 5); break; }
      default: break;
    }    
  }
}

void displayHour( int hour )
{
  int shi = hour / 10;
  int ge = hour % 10;  
  if( Mode == 1 ){
    switch( shi ){
      case 0: { readFile( SD, imageName0, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 1); break; } 
      case 1: { readFile( SD, imageName1, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 1); break; } 
      case 2: { readFile( SD, imageName2, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 1); break; } 
      default: break;
    }
    switch( ge ){
      case 0: { readFile( SD, imageName0, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 2); break; } 
      case 1: { readFile( SD, imageName1, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 2); break; }
      case 2: { readFile( SD, imageName2, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 2); break; }
      case 3: { readFile( SD, imageName3, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 2); break; }
      case 4: { readFile( SD, imageName4, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 2); break; }
      case 5: { readFile( SD, imageName5, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 2); break; }
      case 6: { readFile( SD, imageName6, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 2); break; }
      case 7: { readFile( SD, imageName7, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 2); break; }
      case 8: { readFile( SD, imageName8, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 2); break; }
      case 9: { readFile( SD, imageName9, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 2); break; }
      default: break;
    }
  }
  else if( Mode == 2 ){
    switch( shi ){
      case 0: { readFile( SD, imageHalf0, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 4); break; } 
      case 1: { readFile( SD, imageHalf1, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 4); break; } 
      case 2: { readFile( SD, imageHalf2, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 4); break; } 
      default: break;
    }
    switch( ge ){
      case 0: { readFile( SD, imageHalf0, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 4); break; } 
      case 1: { readFile( SD, imageHalf1, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 4); break; }
      case 2: { readFile( SD, imageHalf2, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 4); break; }
      case 3: { readFile( SD, imageHalf3, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 4); break; }
      case 4: { readFile( SD, imageHalf4, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 4); break; }
      case 5: { readFile( SD, imageHalf5, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 4); break; }
      case 6: { readFile( SD, imageHalf6, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 4); break; }
      case 7: { readFile( SD, imageHalf7, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 4); break; }
      case 8: { readFile( SD, imageHalf8, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 4); break; }
      case 9: { readFile( SD, imageHalf9, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 4); break; }
      default: break;
    }    
  }
}

int previous_sec = 0, previous_hour = 0, previous_minute = 0;
void printLocalTime()
{
  struct tm timeinfo;
  if(!getLocalTime(&timeinfo)){
    Serial.println("Failed to obtain time");
    return;
  }
  Serial.println(&timeinfo, "%A, %B %d %Y %H:%M:%S");
  //Serial.printf( "second: %d\n", timeinfo.tm_sec );

  /* 显示秒 */
  /*if( previous_sec != timeinfo.tm_sec ){
      displaySecond( timeinfo.tm_sec ); 
  }
  previous_sec = timeinfo.tm_sec;

  if( previous_minute != timeinfo.tm_min ){
      displayMinute( timeinfo.tm_min );
  }
  previous_minute = timeinfo.tm_min;

  if( previous_hour != ( timeinfo.tm_hour + 4 ) ){
      displayHour( timeinfo.tm_hour + 4 );
  }
  previous_hour = timeinfo.tm_hour + 4;*/
  displaySecond( timeinfo.tm_sec ); 
  displayMinute( timeinfo.tm_min );
  displayHour( timeinfo.tm_hour + 4 );
}

/*void taskWs2812( void * parameter )
{
  int count = 0;
  while(1){
    count += 5;
    if( count > 255 ) count = 0;
    pixels.setBrightness( count );
    for( int i = 0; i < NUMPIXELS; i ++ ){
      pixels.setPixelColor( i, pixels.Color( 0, 10, 100) ); 
    } 
    pixels.show();
    delay(65);
  }
}*/

int previous_one = 0;
void taskOne(  )
{
  struct tm timeinfo;
  int one = 1;
 // while(1){
    if( !getLocalTime(&timeinfo) ){
      Serial.println("Failed to obtain time");
      return;
    }
    one = timeinfo.tm_sec % 10;
    if( one != previous_one ){
      if( Mode == 1 ){
        switch( one ){
          case 0: { readFile( SD, imageName0, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 6); break; } 
          case 1: { readFile( SD, imageName1, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 6); break; }
          case 2: { readFile( SD, imageName2, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 6); break; }
          case 3: { readFile( SD, imageName3, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 6); break; }
          case 4: { readFile( SD, imageName4, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 6); break; }
          case 5: { readFile( SD, imageName5, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 6); break; }
          case 6: { readFile( SD, imageName6, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 6); break; }
          case 7: { readFile( SD, imageName7, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 6); break; }
          case 8: { readFile( SD, imageName8, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 6); break; }
          case 9: { readFile( SD, imageName9, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 6); break; }
          default: break;
        }
      }
      else if( Mode == 2 ){
          switch( one ){
          case 0: { readFile( SD, imageHalf0, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 6); break; } 
          case 1: { readFile( SD, imageHalf1, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 6); break; }
          case 2: { readFile( SD, imageHalf2, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 6); break; }
          case 3: { readFile( SD, imageHalf3, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 6); break; }
          case 4: { readFile( SD, imageHalf4, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 6); break; }
          case 5: { readFile( SD, imageHalf5, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 6); break; }
          case 6: { readFile( SD, imageHalf6, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 6); break; }
          case 7: { readFile( SD, imageHalf7, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 6); break; }
          case 8: { readFile( SD, imageHalf8, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 6); break; }
          case 9: { readFile( SD, imageHalf9, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 6); break; }
          default: break;
        }
      }
      previous_one = one;
   // }
   // delay( 1000 );
  }
}

int previous_two = 0;
void taskTwo(  )
{
  struct tm timeinfo;
  int two = 1;
 // while(1){
    if( !getLocalTime(&timeinfo) ){
      Serial.println("Failed to obtain time");
      return;
    }
    two = timeinfo.tm_sec / 10;
    if( two != previous_two ){
      if( Mode == 1 ){
        switch( two ){
          case 0: { readFile( SD, imageName0, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 5); break; } 
          case 1: { readFile( SD, imageName1, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 5); break; } 
          case 2: { readFile( SD, imageName2, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 5); break; } 
          case 3: { readFile( SD, imageName3, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 5); break; } 
          case 4: { readFile( SD, imageName4, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 5); break; } 
          case 5: { readFile( SD, imageName5, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 5); break; } 
          default: break;
        }
      }
      else if( Mode == 2 ){
          switch( two ){
          case 0: { readFile( SD, imageHalf0, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 6); break; } 
          case 1: { readFile( SD, imageHalf1, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 6); break; }
          case 2: { readFile( SD, imageHalf2, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 6); break; }
          case 3: { readFile( SD, imageHalf3, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 6); break; }
          case 4: { readFile( SD, imageHalf4, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 6); break; }
          case 5: { readFile( SD, imageHalf5, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 6); break; }
          default: break;
        }
      }
      previous_two = two;
    }
   // delay( 1000 );
  //}
}

int previous_three = 0;
void taskThree(  )
{
  struct tm timeinfo;
  int three = 1;
 // while(1){
    if( !getLocalTime(&timeinfo) ){
      Serial.println("Failed to obtain time");
      return;
    }
    three = timeinfo.tm_min % 10;
    if( three != previous_three ){
      if( Mode == 1 ){
        switch( three ){
          case 0: { readFile( SD, imageName0, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 4); break; } 
          case 1: { readFile( SD, imageName1, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 4); break; }
          case 2: { readFile( SD, imageName2, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 4); break; }
          case 3: { readFile( SD, imageName3, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 4); break; }
          case 4: { readFile( SD, imageName4, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 4); break; }
          case 5: { readFile( SD, imageName5, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 4); break; }
          case 6: { readFile( SD, imageName6, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 4); break; }
          case 7: { readFile( SD, imageName7, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 4); break; }
          case 8: { readFile( SD, imageName8, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 4); break; }
          case 9: { readFile( SD, imageName9, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 4); break; }
          default: break;
        }
      }
      else if( Mode == 2 ){
         switch( three ){
          case 0: { readFile( SD, imageHalf0, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 5); break; } 
          case 1: { readFile( SD, imageHalf1, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 5); break; }
          case 2: { readFile( SD, imageHalf2, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 5); break; }
          case 3: { readFile( SD, imageHalf3, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 5); break; }
          case 4: { readFile( SD, imageHalf4, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 5); break; }
          case 5: { readFile( SD, imageHalf5, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 5); break; }
          case 6: { readFile( SD, imageHalf6, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 5); break; }
          case 7: { readFile( SD, imageHalf7, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 5); break; }
          case 8: { readFile( SD, imageHalf8, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 5); break; }
          case 9: { readFile( SD, imageHalf9, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 5); break; }
          default: break;
        } 
      }
      previous_three = three;
    }
  //  delay( 1000 );
 // }
}

int previous_four = 0;
void taskFour(  )
{
  struct tm timeinfo;
  int four = 1;
  //while(1){
    if( !getLocalTime(&timeinfo) ){
      Serial.println("Failed to obtain time");
      return;
    }
    four = timeinfo.tm_min / 10;
    if( four != previous_four ){
      if( Mode == 1 ){
        switch( four ){
          case 0: { readFile( SD, imageName0, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 3); break; } 
          case 1: { readFile( SD, imageName1, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 3); break; } 
          case 2: { readFile( SD, imageName2, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 3); break; } 
          case 3: { readFile( SD, imageName3, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 3); break; } 
          case 4: { readFile( SD, imageName4, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 3); break; } 
          case 5: { readFile( SD, imageName5, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 3); break; } 
          default: break;
        }
      }
      else if( Mode == 2 ){
        switch( four ){
          case 0: { readFile( SD, imageHalf0, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 5); break; } 
          case 1: { readFile( SD, imageHalf1, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 5); break; }
          case 2: { readFile( SD, imageHalf2, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 5); break; }
          case 3: { readFile( SD, imageHalf3, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 5); break; }
          case 4: { readFile( SD, imageHalf4, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 5); break; }
          case 5: { readFile( SD, imageHalf5, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 5); break; }
          default: break;
        }  
      }
      previous_four = four;
    }
   // delay( 1000 );
 // }
}

int previous_five = 0;
void taskFive(  )
{
  struct tm timeinfo;
  int five = 1;
  //while(1){
    if( !getLocalTime(&timeinfo) ){
      Serial.println("Failed to obtain time");
      return;
    }
    five = timeinfo.tm_hour / 10;
    if( five != previous_five ){
      if( Mode == 1 ){
        switch( five ){
          case 0: { readFile( SD, imageName0, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 2); break; } 
          case 1: { readFile( SD, imageName1, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 2); break; }
          case 2: { readFile( SD, imageName2, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 2); break; }
          case 3: { readFile( SD, imageName3, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 2); break; }
          case 4: { readFile( SD, imageName4, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 2); break; }
          case 5: { readFile( SD, imageName5, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 2); break; }
          case 6: { readFile( SD, imageName6, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 2); break; }
          case 7: { readFile( SD, imageName7, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 2); break; }
          case 8: { readFile( SD, imageName8, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 2); break; }
          case 9: { readFile( SD, imageName9, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 2); break; }
          default: break;
        }
      }
      else if( Mode == 2 ){
        switch( five ){
          case 0: { readFile( SD, imageHalf0, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 4); break; } 
          case 1: { readFile( SD, imageHalf1, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 4); break; }
          case 2: { readFile( SD, imageHalf2, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 4); break; }
          case 3: { readFile( SD, imageHalf3, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 4); break; }
          case 4: { readFile( SD, imageHalf4, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 4); break; }
          case 5: { readFile( SD, imageHalf5, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 4); break; }
          case 6: { readFile( SD, imageHalf6, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 4); break; }
          case 7: { readFile( SD, imageHalf7, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 4); break; }
          case 8: { readFile( SD, imageHalf8, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 4); break; }
          case 9: { readFile( SD, imageHalf9, data1 ); LCD_ShowPicture(0,120,135,120,(uint8_t*)data1, 4); break; }
          default: break;
        }  
      }
      previous_five = five;
    }
   // delay( 1000 );
 // }
}

int previous_six = 0;
void taskSix(  )
{
  struct tm timeinfo;
  int six = 1;
  //while(1){
    if( !getLocalTime(&timeinfo) ){
      Serial.println("Failed to obtain time");
      return;
    }
    six = timeinfo.tm_hour / 10;
    if( six != previous_six ){
      if( Mode == 1 ){
        switch( six ){
          case 0: { readFile( SD, imageName0, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 1); break; } 
          case 1: { readFile( SD, imageName1, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 1); break; } 
          case 2: { readFile( SD, imageName2, data1 ); LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 1); break; } 
          default: break;
        }
      }
      else if( Mode == 2 ){
        switch( six ){
          case 0: { readFile( SD, imageHalf0, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 4); break; } 
          case 1: { readFile( SD, imageHalf1, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 4); break; }
          case 2: { readFile( SD, imageHalf2, data1 ); LCD_ShowPicture(0,0,135,120,(uint8_t*)data1, 4); break; }
          default: break;
        }  
      }
      previous_six = six;
    }
   // delay( 1000 );
 // }
}

Ticker ticker1;
Ticker ticker2;
Ticker ticker3;
Ticker ticker4;
Ticker ticker5;
Ticker ticker6;
Ticker tickerWeather;

void taskGetWeather()
{
  ticker1.detach();
  ticker2.detach();
  ticker3.detach();
  ticker4.detach();
  ticker5.detach();
  ticker6.detach();
  getWeatherAtPresent();
  getWeatherOfNextThreeDays();
  ticker1.attach_ms( 10, taskOne );
  ticker2.attach_ms( 10, taskTwo );
  ticker3.attach_ms( 10, taskThree );
  ticker4.attach_ms( 10, taskFour );
  ticker5.attach_ms( 10, taskFour );
  ticker6.attach_ms( 10, taskSix );
}

void setup() {
  // put your setup code here, to run once:
  LCD_GPIO_Init();//GPIO
  pinMode( 16, OUTPUT );
  LCD_Init( 1 );
  LCD_Init( 2 );
  LCD_Init( 3 );
  LCD_Init( 4 );
  LCD_Init( 5 );
  LCD_Init( 6 );
  delay(100);
  LCD_Fill( 0, 0, 135, 240, BLACK, 1 );
  LCD_Fill( 0, 0, 135, 240, BLACK, 2 );
  LCD_Fill( 0, 0, 135, 240, BLACK, 3 );
  LCD_Fill( 0, 0, 135, 240, BLACK, 4 );
  LCD_Fill( 0, 0, 135, 240, BLACK, 5 );
  LCD_Fill( 0, 0, 135, 240, BLACK, 6 );
  delay(500);
  bootAnimation();
  
  pinMode(ADC_PORT, INPUT); // 初始化 adc 接口
  
  Serial.begin(115200);
  delay(500);
  if(!SD.begin()){
   Serial.println("Card Mount Failed");
   return;
  }
  Serial.println( "Card Mount successfull ..." );
  uint8_t cardType = SD.cardType();
  
  if(cardType == CARD_NONE){
    Serial.println("No SD card attached");
    return;
  }
  uint64_t cardSize = SD.cardSize() / (1024 * 1024);
  Serial.printf("SD Card Size: %lluMB\n", cardSize);
  delay( 100 );
  
  //connect to WiFi
  Serial.printf("Connecting to %s ", ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
  }
  Serial.println(" CONNECTED");
  delay( 100 );
  
  //init and get the time
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  printLocalTime();

  //disconnect WiFi as it's no longer needed
 // WiFi.disconnect(true);
  //WiFi.mode(WIFI_OFF);

  /*-----------------------------------------*/
  

  /*---------------- Tickers ----------------*/
  ticker1.attach_ms( 10, taskOne );
  ticker2.attach_ms( 10, taskTwo );
  ticker3.attach_ms( 10, taskThree );
  ticker4.attach_ms( 10, taskFour );
  ticker5.attach_ms( 10, taskFour );
  ticker6.attach_ms( 10, taskSix );

  //tickerWeather.attach( 1800, taskGetWeather );
}


int keyCount = 1;
bool keyPressed = false;

void loop(){
  unsigned int adcRead = analogRead( ADC_PORT );
 // Serial.printf("adcRead: %d \n", adcRead );
  if( adcRead > 4090 && adcRead < 4100 ){// 按下了第一个按键，切换显示效果
    delay( 50 );// 防抖
    keyPressed = true;
    keyCount ++;
    if( keyCount > 10 ) keyCount = 10;
    Serial.printf("keyCount: %d ", keyCount );
  }
  if( adcRead > 2855 && adcRead < 2920 ){ // 按下了第二个按键，切换显示效果
    delay( 50 );// 防抖
    keyPressed = true;
    keyCount --;
    if( keyCount < 1 ) keyCount = 1;
    Serial.printf("keyCount: %d ", keyCount );
  }
  if( adcRead > 1700 && adcRead < 1890 ){// 按下了第三个按键, 切换显示模式
    delay( 50 );
    if( Mode == 1 ){
      Mode = 2;
      ticker1.detach();
      ticker2.detach();
      ticker3.detach();
      ticker4.detach();
      ticker5.detach();
      ticker6.detach();    
     /* readFile( SD, "/weather1.bin", data1 ); 
      LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 1);
      LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 2);
      LCD_ShowPicture(0,0,135,240,(uint8_t*)data1, 3);*/
      printLocalTime();
      weatherInitDisplay();
      ticker1.attach_ms( 10, taskOne );
      ticker2.attach_ms( 10, taskTwo );
      ticker3.attach_ms( 10, taskThree );
      ticker4.attach_ms( 10, taskFour );
      ticker5.attach_ms( 10, taskFour );
      ticker6.attach_ms( 10, taskSix ); 
      tickerWeather.attach( 1800, taskGetWeather );
    }
    else if( Mode == 2 ) {
      Mode = 1;
      ticker1.detach();
      ticker2.detach();
      ticker3.detach();
      ticker4.detach();
      ticker5.detach();
      ticker6.detach();
      tickerWeather.detach();
      printLocalTime();
      ticker1.attach_ms( 10, taskOne );
      ticker2.attach_ms( 10, taskTwo );
      ticker3.attach_ms( 10, taskThree );
      ticker4.attach_ms( 10, taskFour );
      ticker5.attach_ms( 10, taskFour );
      ticker6.attach_ms( 10, taskSix ); 
    }

    Serial.printf("Mode: %d ", Mode );
  }

  if( keyCount == 1 && keyPressed == true ){
    keyPressed = false;  
    imageName0 = "/image0.bin";
    imageName1 = "/image1.bin";
    imageName2 = "/image2.bin";
    imageName3 = "/image3.bin";
    imageName4 = "/image4.bin";
    imageName5 = "/image5.bin";
    imageName6 = "/image6.bin";
    imageName7 = "/image7.bin";
    imageName8 = "/image8.bin";
    imageName9 = "/image9.bin";
    //delay( 1000 );
    ticker1.detach();
    ticker2.detach();
    ticker3.detach();
    ticker4.detach();
    ticker5.detach();
    ticker6.detach();
    printLocalTime();
    ticker1.attach_ms( 10, taskOne );
    ticker2.attach_ms( 10, taskTwo );
    ticker3.attach_ms( 10, taskThree );
    ticker4.attach_ms( 10, taskFour );
    ticker5.attach_ms( 10, taskFour );
    ticker6.attach_ms( 10, taskSix );
  }
  else if( keyCount == 2 && keyPressed == true ){
    keyPressed = false;
    imageName0 = "/image2_0.bin";
    imageName1 = "/image2_1.bin";
    imageName2 = "/image2_2.bin";
    imageName3 = "/image2_3.bin";
    imageName4 = "/image2_4.bin";
    imageName5 = "/image2_5.bin";
    imageName6 = "/image2_6.bin";
    imageName7 = "/image2_7.bin";
    imageName8 = "/image2_8.bin";
    imageName9 = "/image2_9.bin";
    //delay( 1000 );
    ticker1.detach();
    ticker2.detach();
    ticker3.detach();
    ticker4.detach();
    ticker5.detach();
    ticker6.detach();
    printLocalTime();
    ticker1.attach_ms( 10, taskOne );
    ticker2.attach_ms( 10, taskTwo );
    ticker3.attach_ms( 10, taskThree );
    ticker4.attach_ms( 10, taskFour );
    ticker5.attach_ms( 10, taskFour );
    ticker6.attach_ms( 10, taskSix );    
  }
  else if( keyCount == 3 && keyPressed == true ){
    keyPressed = false;
    imageName0 = "/image3_0.bin";
    imageName1 = "/image3_1.bin";
    imageName2 = "/image3_2.bin";
    imageName3 = "/image3_3.bin";
    imageName4 = "/image3_4.bin";
    imageName5 = "/image3_5.bin";
    imageName6 = "/image3_6.bin";
    imageName7 = "/image3_7.bin";
    imageName8 = "/image3_8.bin";
    imageName9 = "/image3_9.bin";
    //delay( 1000 );
    ticker1.detach();
    ticker2.detach();
    ticker3.detach();
    ticker4.detach();
    ticker5.detach();
    ticker6.detach();
    printLocalTime();
    ticker1.attach_ms( 10, taskOne );
    ticker2.attach_ms( 10, taskTwo );
    ticker3.attach_ms( 10, taskThree );
    ticker4.attach_ms( 10, taskFour );
    ticker5.attach_ms( 10, taskFour );
    ticker6.attach_ms( 10, taskSix );    
  }
  else if( keyCount == 4 && keyPressed == true ){
    keyPressed = false;
    imageName0 = "/image4_0.bin";
    imageName1 = "/image4_1.bin";
    imageName2 = "/image4_2.bin";
    imageName3 = "/image4_3.bin";
    imageName4 = "/image4_4.bin";
    imageName5 = "/image4_5.bin";
    imageName6 = "/image4_6.bin";
    imageName7 = "/image4_7.bin";
    imageName8 = "/image4_8.bin";
    imageName9 = "/image4_9.bin";
    //delay( 1000 );
    ticker1.detach();
    ticker2.detach();
    ticker3.detach();
    ticker4.detach();
    ticker5.detach();
    ticker6.detach();
    printLocalTime();
    ticker1.attach_ms( 10, taskOne );
    ticker2.attach_ms( 10, taskTwo );
    ticker3.attach_ms( 10, taskThree );
    ticker4.attach_ms( 10, taskFour );
    ticker5.attach_ms( 10, taskFour );
    ticker6.attach_ms( 10, taskSix );    
  }
  else {
      
  }

  delay( 100 );
}
